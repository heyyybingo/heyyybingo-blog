{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1},{"_id":"source/images/example.jpeg","path":"images/example.jpeg","modified":0,"renderable":0},{"_id":"source/images/browerFlow.png","path":"images/browerFlow.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/混合开发/小程序控件.md","hash":"531e5e433a8714d0cca150356c6765581fcb09ca","modified":1662047784910},{"_id":"source/_posts/混合开发/虚拟滚动.md","hash":"6aa951ba41313738dc0428e327e83567e3806eb2","modified":1662047861669},{"_id":"source/_posts/hello-world.md","hash":"f1991d6086191759c44c12646faaccf99edefcc2","modified":1662731568302},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1662048364901},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1662048364901},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1662048364901},{"_id":"node_modules/hexo-theme-ayer/_config.yml","hash":"ddbc8e7c51c4f3be006faacf737c40664c3265fc","modified":1662049965987},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1662048365501},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"53be9bba4abd5f4d28ddc8b0a913317531cc4877","modified":1662048365511},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1662048365511},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1662048365567},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1662048365689},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1662048364913},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1662048364927},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1662048364929},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1662048365499},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1655032316937},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1662048364901},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1662048365571},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1662048365688},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1662048365514},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1662048364947},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1662048365515},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1662048365575},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1662048365514},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1662048365477},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1662048365515},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1662048365515},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1662048365515},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1662048365567},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1662048365485},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1662048365509},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1662048365501},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":1662048364912},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1662048364912},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1662048365501},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1662048364913},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1662048364912},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1662048364916},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1662048365561},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1662048365561},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1662048365567},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1662048365567},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1662048365569},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1662048365510},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1662048365575},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1662048364912},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1662048364912},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1662048364913},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"c09ba80cfa41aaac17f0f7ff2586e73241adab20","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1662048364914},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1662048364916},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1662048364916},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1662048364915},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1662048365569},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1662048365571},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1662048365571},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1662048365571},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1662048365572},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1662048365571},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1662048365575},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1662048364911},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1662048365573},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1662048365574},{"_id":"node_modules/hexo-theme-ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1662048364966},{"_id":"node_modules/hexo-theme-ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1662048365502},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1662048365506},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1662048364910},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1662048365685},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1662048365661},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1662048365064},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1662048365477},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1662048365567},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1662048365029},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1662048365135},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1662048364927},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1662048365635},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1662048365265},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1662048365447},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1662048365602},{"_id":"themes/ayer/.gitattributes","hash":"0a06233e35936dfb7efe1472917805056a159fa2","modified":1662050122895},{"_id":"themes/ayer/.gitignore","hash":"b18b650c857471724778c1450c446b93192d8b0e","modified":1662050122896},{"_id":"themes/ayer/.npmignore","hash":"1744752b89ad4271612ff0a03232ed56484e592c","modified":1662050122896},{"_id":"themes/ayer/.travis.yml","hash":"e8e8c5607528fd55ac11dde00b6186d3ea52fdef","modified":1662050122896},{"_id":"themes/ayer/index.js","hash":"19292aa9df268dbab8ac51a2a3aa7a20ac1eb00a","modified":1662050122897},{"_id":"themes/ayer/_config.yml","hash":"2fac9880687acb5c4d7685012256566f8e226078","modified":1662384605610},{"_id":"themes/ayer/.stylintrc","hash":"557d72b4dcd86e66fc5c688595288cf06b12ce6c","modified":1662050122896},{"_id":"themes/ayer/LICENSE","hash":"e39066a824465f4d6ad5ce7903b4d683d38d2b6c","modified":1662050122896},{"_id":"themes/ayer/README.md","hash":"4e515889ec444939e9a06947fae120503a3fa7b2","modified":1662050122896},{"_id":"themes/ayer/rollup.config.js","hash":"13b61821acd9fc27131a34853037184b94ae8577","modified":1662050122902},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1662050122902},{"_id":"themes/ayer/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1662050122902},{"_id":"themes/ayer/move_config.js","hash":"e310bdb9a8738e506e53a40bd3cd895008d4cd61","modified":1662050122902},{"_id":"themes/ayer/languages/de.yml","hash":"cdeed93d1eb4e65195aaf97d8c517e97106ddfd5","modified":1662050122897},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"186f05c1b9509a4ad957490004ff37462aedd984","modified":1662050122895},{"_id":"themes/ayer/.github/config.yml","hash":"0300d3458011582f8158a3588912dac4cb3ec21a","modified":1662050122896},{"_id":"themes/ayer/languages/default.yml","hash":"7e16c460c2c3d953c3bdebdef471ea747812b7a1","modified":1662050122897},{"_id":"themes/ayer/languages/en.yml","hash":"7e16c460c2c3d953c3bdebdef471ea747812b7a1","modified":1662050122897},{"_id":"themes/ayer/languages/es.yml","hash":"a3e8d81b99f62f86b3f34708253070b8806b31c8","modified":1662050122897},{"_id":"themes/ayer/languages/no.yml","hash":"f8d7294f0d73ec35c37c050462cb725ea25a0fcc","modified":1662050122897},{"_id":"themes/ayer/languages/pt.yml","hash":"b137b9aead0dc4e2c2d9217ceb270460e41f5cb3","modified":1662050122897},{"_id":"themes/ayer/languages/ja.yml","hash":"d2ccb7ac8c9ff2ee721843741bb30b019d0a8083","modified":1662050122897},{"_id":"themes/ayer/languages/vi.yml","hash":"7d019ee795816a6a030a039d8238b71be04098fd","modified":1662050122897},{"_id":"themes/ayer/languages/ko.yml","hash":"7dc54c2db864e5b725b55e201030e92acc1c422e","modified":1662050122897},{"_id":"themes/ayer/languages/ru.yml","hash":"cdce73598db1aefb17b1c91658cfa4c906b98e24","modified":1662050122897},{"_id":"themes/ayer/languages/fr.yml","hash":"4a3cb84884988624943c6b0f8c1754da34943092","modified":1662050122897},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"edb2654bdb684fe0f21e8d6c841496c3506006ed","modified":1662050122898},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1662050122901},{"_id":"themes/ayer/layout/categories.ejs","hash":"c40f84aacdf7d33cfcb4eb9f78f331dad699abff","modified":1662050122901},{"_id":"themes/ayer/layout/index.ejs","hash":"77347cbb8635611d8b1fb84bde75f9dedaf8632d","modified":1662050122901},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"68400b1859e58cba03b05020ac8f47b807933027","modified":1662050122898},{"_id":"themes/ayer/scripts/default_config.js","hash":"70d6ee032d75410d540b6789b5949739a47f0125","modified":1662050122904},{"_id":"themes/ayer/layout/layout.ejs","hash":"84864bd6b4fc92bdd0a8ccba491fe490a8ecbf9b","modified":1662050122901},{"_id":"themes/ayer/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1662050122901},{"_id":"themes/ayer/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1662050122902},{"_id":"themes/ayer/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1662050122902},{"_id":"themes/ayer/layout/friends.ejs","hash":"18382cd4429588e58bf046beacaed06704832fe3","modified":1662050122901},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1662050122915},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"39cce1936f5f0e2feb924a7af2f52a631d81b84f","modified":1662050122901},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"4be6c40d386582293bcabf96321277238db57a51","modified":1662050122895},{"_id":"themes/ayer/source-src/main.js","hash":"13c57a2cec878217a5a3ee9afb6705d4c3cc0d3c","modified":1662050122908},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"3ff1b124e532465ba14475f3ea8f4ec5d8856028","modified":1662050122896},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"94ee4baf54bfa786228aafc0f2f8c17076a99a0b","modified":1662050122895},{"_id":"themes/ayer/source/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1662050122908},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"6cb78a96b83ed228fb3c956f2dbc654220335ec0","modified":1662050122896},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"17ccda6fb61f1b6df94d23db936665c00a29a85b","modified":1662050122898},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"d8d4951f5f3f08660dc4ba6d1a44eb56d3b094b4","modified":1662050122895},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"41a2f132410c77891cc8117062a0700d8ed64bb9","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"d36962c66e3653aa94cc428731dd43a7ea4f979d","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/float-btns.ejs","hash":"43ba0cd1f9e898bcbd873b1e9a2d47249d6aaf77","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"c228fa93bcf2f8403729342854211ea976df9a9f","modified":1662050122898},{"_id":"themes/ayer/languages/nl.yml","hash":"2c289e97000c0c67636d96895aaa801c8abec0d4","modified":1662050122897},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"1407c1043fdb628642de9d2990921d92a3c2f078","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"ca81abe75c80ab32d6b6c4fe65de8e74df07bef3","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"a56c8905987fa86657a9f081a89c12e5a5a5df54","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"61100fe248a744fab5dc71fb610992cbeff27e54","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"d38a59e2316b8a9c233c2f41edc2a03eab2c0a2e","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"cde5caf73f120b1300ec7539bbf675597688c734","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"01ca257dde90dcadf1288a641401f6cf21a0ad43","modified":1662050122898},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"cf441365eff1f8143e3c9ae54954d0ebe0a358e5","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"7bcde0d6384819fd4c975a6e6e24e0919fbb1593","modified":1662050122901},{"_id":"themes/ayer/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1662050122904},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"58f4c93d22e4eb9743915223444335fb6fe06d21","modified":1662050122904},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"7b3df58faaa875d17afbf74ddef5601116f2ce3d","modified":1662050122904},{"_id":"themes/ayer/scripts/lib/core.js","hash":"7908a82a86d63f35c6f785cacb1cfaf99ae7e0f9","modified":1662050122904},{"_id":"themes/ayer/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1662050122905},{"_id":"themes/ayer/layout/_partial/lock.ejs","hash":"bbb00715c204197e7790d08be9a29afe5976146e","modified":1662050122899},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e435b782178da75656f9616c7af564fb9ff0de50","modified":1662050122904},{"_id":"themes/ayer/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1662050122905},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"e3b411aef6e5f25f6c5c66b93d653ef70da8d4af","modified":1662050122901},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"752666b28d5caed5e7d82d697d7546461e451d6f","modified":1662050122899},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"f9c8fceb2130929b8f11e22b1c3476c99d1574a8","modified":1662050122904},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"017f9b628806eeb199da2e77485cd9ac8e2117b3","modified":1662050122908},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1662050122927},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1662050122927},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1662050122927},{"_id":"themes/ayer/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1662050122915},{"_id":"themes/ayer/source/css/custom.styl","hash":"56276abe6cd7cbf49fbf4fd4c986733188374160","modified":1662050122908},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1662050122927},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1662050122928},{"_id":"themes/ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1662050122915},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"219753a5cf40cfbd557fbde01a71f589e6de4327","modified":1662050122905},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1662050122927},{"_id":"themes/ayer/source/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1662050122928},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1662050122928},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"ce395318edf69766fe11161c4587a97f84521d85","modified":1662050122907},{"_id":"themes/ayer/source-src/css/style.styl","hash":"3941939bdb95297488d19e3e3716d5925b6eed44","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"630e719b9e805a26182a37152435d4787c0f1734","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"8dedef428b6ac7d629e1d1f6039b0f60dacc4c5e","modified":1662050122905},{"_id":"themes/ayer/source-src/js/share.js","hash":"7edce2efe23e75e29765201dc8b00fd2a5b5c9d2","modified":1662050122908},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1662050122916},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1662050122916},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1662050122916},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"910dd0682971a616e1610daec23e7ff5a556df98","modified":1662050122907},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"538d48e89c9908155f16ff82aaf4c2b1122b11f4","modified":1662050122907},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1662050122916},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1662050122916},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1662050122926},{"_id":"themes/ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1662050122926},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1662050122926},{"_id":"themes/ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1662050122926},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1662050122926},{"_id":"themes/ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1662050122926},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"cfb16c9dda7a609776a28702e0c3854a52e422a7","modified":1662050122899},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1662050122926},{"_id":"themes/ayer/layout/_partial/post/author.ejs","hash":"57738b222e00bbd110be65d300d8bed34d73b3ea","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"9f86e3d222555181a3e631a09bcdabdd44507cb8","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"bc540478d35780e142b069ba2adafd5d5ce8a7b0","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"4a21fd3d7335ffcd0661036fee81a927c125e2e2","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"e59198918e92ef92156aeefbf6023584ac1cae64","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/minivaline.ejs","hash":"41de9084eedcbba1403897c4aa01ced0cb6b9ba5","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"4647234e5c4529d754c9d0fc53ca9e9205f21443","modified":1662050122899},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"63bc5c056b2db2aca479705fc94eaa7fd26a7976","modified":1662050122901},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"4b8e8455709debd73fba6bf3aad63378c4156dc1","modified":1662050122901},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"369396d0c5b669df7a26df95f7a1b8a52f4eea65","modified":1662050122901},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"3b076a65b9847cd6e0d424f5c2874046ef51d4d9","modified":1662050122900},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"0a364766931f48df60b7c92fec8fde1067a93e00","modified":1662050122900},{"_id":"themes/ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1662050122926},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"fea793e132f627a8148059a9aee8bc33550506d1","modified":1662050122900},{"_id":"themes/ayer/scripts/events/lib/hello.js","hash":"2ed130e5e1c2bc021be8d755f34c4fcf61a60121","modified":1662050122904},{"_id":"themes/ayer/scripts/events/lib/merge-configs.js","hash":"54836a1b41ebb32acc41839f53e1892779f66bb2","modified":1662050122904},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"d4be39f60a81dd0e5bdd49671e7308deddc572de","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"39a0bc6c5cf85f0527d6ee81f6feebce8550c1dd","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"712cb4d8f3cef18dc33281bd8e9b6879efdb1687","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"3044bf059522e79a726265c9a2f603ec8dc4222d","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"3b11d0c6c4439b0856ba81c50bd8867d5bb081da","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"94342884feac98e5ef58c9bd2781fc8f35220c1c","modified":1662050122905},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"9dd116846c92daee1c8f80b79cab231613b164b2","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"e894b3a1aff76e84137e1e6db59a75afd0a53f52","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"f2f43ae9831c3df017b35c68caa94f5eb911f697","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"1a4576c38ef19834a4d0a8ac887e7b55d21f2f13","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"da34b6125de01938d11de6ad3c0fed2c75faf40a","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bde7bf3577c66a3ac829410d52fa2144212282ef","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"b81d13334cf39941792dff0e3af393fb7b8cc214","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"a8a069ea34a0fd043832890db5341405e9f462cd","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"f81076fc6d4a83be3371bcb79ab54d88e2605714","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"87df748185edfba222c3f9a4b9ef8eee0e8e5ad3","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"007bca390ec685349add74e033ff2cb90a1701bc","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"da8a82a48852411c10e279dfee43038d46f4f273","modified":1662050122906},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"9e9d8dc167ed2c332e4520cbf41244c34c1ebf64","modified":1662050122907},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"9ce2dd3ffdc4e170dfcb975a7158f913bc40b8d8","modified":1662050122907},{"_id":"themes/ayer/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1662050122928},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1662050122916},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1662050122918},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1662050122927},{"_id":"themes/ayer/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1662050122908},{"_id":"themes/ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1662050122915},{"_id":"themes/ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1662050122914},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1662050122926},{"_id":"themes/ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1662050122903},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1662050122919},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1662050122918},{"_id":"themes/ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1662050122910},{"_id":"themes/ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1662050122914},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1662050122921},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1662050122925},{"_id":"themes/ayer/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1662050122913},{"_id":"source/categories/index.md","hash":"2891462768b9646ce6efac72bdae29267f5ef3d2","modified":1662051439408},{"_id":"source/tags/index.md","hash":"0ffe85a636323f8c1820d79f334e1191d2b6eaec","modified":1662051443247},{"_id":"public/categories/index.html","hash":"f2ceca4d785b8037a355db92355ca1e9b29387b3","modified":1662730130507},{"_id":"public/tags/index.html","hash":"f4a03619037574cf559fa385e511c031e169e211","modified":1662730130507},{"_id":"public/tags/小程序/index.html","hash":"c566253639e8974d58caab2e8b69774731e94b6c","modified":1662051574571},{"_id":"public/tags/测试/index.html","hash":"a5ce8b66c3ccf54be07fe37df7bc17b332944528","modified":1662051574571},{"_id":"public/2022/06/15/混合开发/虚拟滚动/index.html","hash":"8d4b69b936beb68fb8988d96ddf493cce280328f","modified":1662051574571},{"_id":"public/2022/06/13/hello-world/index.html","hash":"76fefcea61199893e5c5bd7066ee7e97d59e3c99","modified":1662730130507},{"_id":"public/archives/index.html","hash":"90b8d17ff99eade3aa9918659ea7bf69a050a65d","modified":1662730130507},{"_id":"public/categories/混合开发/index.html","hash":"d3538c438f9557a6348599f7a4ba5ce55d3b27f5","modified":1662055232442},{"_id":"public/archives/2022/index.html","hash":"80c744de4754ef930d207e8feb2bddcb37acf520","modified":1662730130507},{"_id":"public/archives/2022/06/index.html","hash":"e806610f19f15532612924b32ae656cabc9d994b","modified":1662730130507},{"_id":"public/index.html","hash":"a20ace8b158bc1861c94a49a86fdcb9cf1a16a04","modified":1662730130507},{"_id":"public/2022/06/15/混合开发/小程序控件/index.html","hash":"66e53af0c81b3d300f5820f03d5f48472c576018","modified":1662051574571},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1662051574571},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1662051574571},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1662051574571},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1662051574571},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1662051574571},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1662051574571},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1662051574571},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1662051574571},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1662051574571},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1662051574571},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1662051574571},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1662051574571},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1662051574571},{"_id":"public/images/sponsor.jpg","hash":"5b5e4498177b369a7eca7ab2b1d0710b8690e21d","modified":1662051574571},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1662051574571},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1662051574571},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1662051574571},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1662051574571},{"_id":"public/css/custom.css","hash":"58950a4f4cd82465f85428ec17b3bc05f8153b56","modified":1662051574571},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1662051574571},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1662051574571},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1662051574571},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1662051574571},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1662051574571},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1662051574571},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1662051574571},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1662051574571},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1662051574571},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1662051574571},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1662051574571},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1662051574571},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1662051574571},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1662051574571},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1662051574571},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1662051574571},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1662051574571},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1662051574571},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1662051574571},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1662051574571},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1662051574571},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1662051574571},{"_id":"public/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1662051574571},{"_id":"source/_posts/node相关/node中的事件循环.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052856482},{"_id":"source/_posts/js基础/promise.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052243070},{"_id":"source/_posts/node相关/node基础.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052719871},{"_id":"source/_posts/js基础/事件循环.md","hash":"c25372fc4018230fc58c65442b9a5576ee0b58bc","modified":1662913242201},{"_id":"source/_posts/node相关/Node线程池.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052863056},{"_id":"source/_posts/node相关/node中libuv.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052814991},{"_id":"source/_posts/js基础/原型链与闭包.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052286885},{"_id":"source/_posts/css基础/居中方式.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052346338},{"_id":"source/_posts/css基础/移动端css适配.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052357633},{"_id":"source/_posts/算法/堆排序.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052383549},{"_id":"source/_posts/前端框架/虚拟dom与diff.md","hash":"9d6573a93c7db2652b711f2459ebf31f31b78f61","modified":1663087223599},{"_id":"source/_posts/算法/归并排序.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052389966},{"_id":"source/_posts/混合开发/jsbridge.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052510389},{"_id":"source/_posts/混合开发/跨端框架.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052564173},{"_id":"source/_posts/混合开发/离线包原理.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052543657},{"_id":"source/_posts/设计模式/单例模式.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052695015},{"_id":"source/_posts/设计模式/工厂模式.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052701432},{"_id":"source/_posts/前端框架/Vue/Vue2与Vue3.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052683431},{"_id":"source/_posts/前端框架/Vue/vue基础.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052422516},{"_id":"source/_posts/前端框架/React/react生命周期.md","hash":"91fbceb39f27542d3e3a841c49f528f6612239bd","modified":1663079320480},{"_id":"source/_posts/前端框架/React/react的Fiber架构.md","hash":"60f96a9e3f3936c2fcd1a1324959d39be4d645ff","modified":1663090672904},{"_id":"source/_posts/计算机基础/操作系统/进程与线程.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052642397},{"_id":"source/_posts/计算机基础/计算机网络/http.md","hash":"05ad1b9dc11c5c4c62194ef1f14b419bba76c8e8","modified":1662395980179},{"_id":"source/_posts/计算机基础/计算机网络/三次握手四次挥手.md","hash":"1bf2c36df2ddb0190cee5417de19ef9d2bb954f9","modified":1662396038721},{"_id":"source/_posts/前端框架/Vue/vue生命周期.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052404565},{"_id":"source/_posts/前端框架/React/react基础.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662052414315},{"_id":"source/_posts/js基础/防抖与节流.md","hash":"b0ff3aeb440510944541f181520fcb66d0d6c915","modified":1662383339454},{"_id":"public/2022/09/02/node相关/node中的事件循环/index.html","hash":"13a456296d97fc8cf09c9e396a46880062b4a430","modified":1662730130507},{"_id":"public/2022/09/02/node相关/Node线程池/index.html","hash":"89f5d65a4ad4af69ce25c2a7419c3a3938e5e696","modified":1662730130507},{"_id":"public/2022/09/02/node相关/node中libuv/index.html","hash":"06068465643eb5c3472acd268a5dd4c4ae3393ad","modified":1662730130507},{"_id":"public/2022/09/02/node相关/node基础/index.html","hash":"0a20e9a4fc9e424bcf1e71f0dd828c12a98348b9","modified":1662730130507},{"_id":"public/2022/09/02/设计模式/工厂模式/index.html","hash":"c70f863b2b6bf6800252bfc8b843a7d49d4a24e7","modified":1662730130507},{"_id":"public/2022/09/02/设计模式/单例模式/index.html","hash":"96a709d3009405d620d3e5270d69476e7a89670a","modified":1662730130507},{"_id":"public/2022/09/02/前端框架/Vue/Vue2与Vue3/index.html","hash":"6fafe30dea8adba6eb5e7f3118a0e63d66f132d8","modified":1662730130507},{"_id":"public/2022/09/02/前端框架/React/react的Fiber架构/index.html","hash":"c2d495a96cf0c7c372fb68e75d588d9e78c2967d","modified":1662730130507},{"_id":"public/2022/09/02/计算机基础/操作系统/进程与线程/index.html","hash":"71512799fb5c9273b4b91161ce317c072c70ab5d","modified":1662730130507},{"_id":"public/2022/09/02/混合开发/跨端框架/index.html","hash":"0a776b4d258ea5937c7480046ac39fcc314ed750","modified":1662730130507},{"_id":"public/2022/09/02/混合开发/离线包原理/index.html","hash":"b13989512baf8caedc3ea196798c5fb2f89af0fe","modified":1662730130507},{"_id":"public/2022/09/02/混合开发/jsbridge/index.html","hash":"0b24bdb57968f3280e3452a846231a948a559d06","modified":1662730130507},{"_id":"public/2022/09/02/计算机基础/计算机网络/三次握手四次挥手/index.html","hash":"f140ce425514628ee765b194f747d7a63a388b2c","modified":1662055232442},{"_id":"public/2022/09/02/计算机基础/计算机网络/http/index.html","hash":"d37b6f3b1d7263f1027579b25b7dfe614b3abe23","modified":1662055232442},{"_id":"public/2022/09/02/前端框架/虚拟dom与diff/index.html","hash":"99863c1f7029561c19c2fcb050ea061f52ecbdae","modified":1662730130507},{"_id":"public/2022/09/02/前端框架/Vue/vue基础/index.html","hash":"b6b8afcaca4e063fa9c00b6a1c85dc494f3c1de7","modified":1662730130507},{"_id":"public/2022/09/02/前端框架/React/react基础/index.html","hash":"d24212d9636c50d692719777b05ad42525b85c4c","modified":1662730130507},{"_id":"public/2022/09/02/前端框架/Vue/vue生命周期/index.html","hash":"c6a7eb70820872fbe7cbd812e6b68ca5794065e5","modified":1662730130507},{"_id":"public/2022/09/02/算法/归并排序/index.html","hash":"5037bc245e89ad4dc3f674480e3924c6716234d5","modified":1662730130507},{"_id":"public/2022/09/02/前端框架/React/react生命周期/index.html","hash":"e5bda3f9a3b73db6047ec4942b2fba349e5180a7","modified":1662730130507},{"_id":"public/2022/09/02/算法/堆排序/index.html","hash":"a51c5de7ec066cec5d973a109f1cc12fe08f7005","modified":1662730130507},{"_id":"public/2022/09/02/css基础/移动端css适配/index.html","hash":"920a779f1ebfa398817c0436b5f187502274ac26","modified":1662730130507},{"_id":"public/2022/09/02/css基础/居中方式/index.html","hash":"946a053348cf72969716b0be7c5bb22ff6646507","modified":1662730130507},{"_id":"public/2022/09/02/js基础/原型链与闭包/index.html","hash":"b9c07258d77776d8a9a17fa3d4ebfa60512e929d","modified":1662730130507},{"_id":"public/2022/09/02/js基础/事件循环/index.html","hash":"33709a8e8b7c6a76ddab69610c9f69724c6abab7","modified":1662730130507},{"_id":"public/2022/09/02/js基础/promise/index.html","hash":"bd71f460d179578c88f5ec0afb944476531eed80","modified":1662055232442},{"_id":"public/archives/page/2/index.html","hash":"681f254328ccee8971293fe2baa46a8e682eddf7","modified":1662730130507},{"_id":"public/archives/page/3/index.html","hash":"22d8210aee93707edb44148e4e2a3a4d3a57d3b9","modified":1662730130507},{"_id":"public/archives/2022/page/2/index.html","hash":"c75b19814760533a5d0a8353348fee33328e7bf4","modified":1662730130507},{"_id":"public/2022/06/15/js基础/防抖与节流/index.html","hash":"67c9fa48ca167a86b19490f4d3d4ba011740754a","modified":1662055232442},{"_id":"public/archives/2022/page/3/index.html","hash":"c506068406a91afeac14717a7730aa988c65a412","modified":1662730130507},{"_id":"public/archives/2022/09/index.html","hash":"09addf1b55a2c2733d4053bdd9f7d96fb5930a56","modified":1662730130507},{"_id":"public/archives/2022/09/page/2/index.html","hash":"27841f2dd945cc38fd85f7bd31139ab9f8962cb9","modified":1662730130507},{"_id":"public/archives/2022/09/page/3/index.html","hash":"71ad331781f25dc20d2ef55af545b467d2513330","modified":1662730130507},{"_id":"public/page/3/index.html","hash":"64dc6b4dbf5de36d1f4beac406dd03af59a0aaf9","modified":1662730130507},{"_id":"public/page/2/index.html","hash":"9bec16cd925a1e6e1e8a2df33a1919424ff8fc09","modified":1662730130507},{"_id":"source/_posts/计算机基础/计算机网络/从浏览器输入网址到渲染的流程.md","hash":"3d999b14469d7abf8a89484fe457541b71085b16","modified":1662387990205},{"_id":"source/_posts/算法/LRU.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1662387875150},{"_id":"source/images/example.jpeg","hash":"bba9700be9e7a9571948d89d60869f2756ff4b8b","modified":1662729985472},{"_id":"source/_posts/js基础/promise原理与实现.md","hash":"30b7957e2d2cfc300a659f602dcebd7bbfdb80c0","modified":1662913245641},{"_id":"public/2022/09/05/计算机基础/计算机网络/三次握手四次挥手/index.html","hash":"7f6020027a2ce592cbde09041f5dd3ed4b5aa6ce","modified":1662730130507},{"_id":"public/2022/09/05/算法/LRU/index.html","hash":"27dbf000789af247103212492013561927036810","modified":1662730130507},{"_id":"public/2022/09/05/计算机基础/计算机网络/http/index.html","hash":"b48785463f466951bc10aba9f0c0c5b01e5028af","modified":1662730130507},{"_id":"public/categories/计算机基础/index.html","hash":"70cff8f369eb7e0c0eed71fe4d7cf73b5fd5f273","modified":1662730130507},{"_id":"public/categories/计算机基础/计算机网络/index.html","hash":"bc8db6ded86dd3992e42ed022f69631939741cd9","modified":1662730130507},{"_id":"public/categories/js基础/index.html","hash":"ef3de59fe0bd1c97200f4b55d26045abe0ef3743","modified":1662730130507},{"_id":"public/categories/js/index.html","hash":"6345449fa1bd7ae4381da98dece30c59955076a5","modified":1662730130507},{"_id":"public/tags/js/index.html","hash":"af025f0bd6f5a60be3123cc4c700518d4aef157a","modified":1662730130507},{"_id":"public/tags/函数/index.html","hash":"879c310a7a5ad2601f188ad147dde473701a0ade","modified":1662730130507},{"_id":"public/tags/性能优化/index.html","hash":"85fc1f58fb6336f912e625e9c06033a2b01ef212","modified":1662730130507},{"_id":"public/tags/dns/index.html","hash":"8c83d3b8184125acadff37e38d011c3735d4e599","modified":1662730130507},{"_id":"public/tags/浏览器/index.html","hash":"840f141ca7567c5cf0525f591868a6d4b65e498e","modified":1662730130507},{"_id":"public/tags/异步编程/index.html","hash":"b4b3d46e22b7dde6785e03d851ff241249ade8a4","modified":1662730130507},{"_id":"public/tags/promise/index.html","hash":"d5182e99491f13b0bf8c06ac74df4e174299dc25","modified":1662730130507},{"_id":"public/tags/tcp/index.html","hash":"305fd4b19864ddcf20097aa160c1a9c00d503b34","modified":1662730130507},{"_id":"public/tags/http/index.html","hash":"e7f241704fbc9c3bd890fbff7edb667e87d3de0d","modified":1662730130507},{"_id":"public/2022/09/05/计算机基础/计算机网络/从浏览器输入网址到渲染的流程/index.html","hash":"1fc2615f41ca2c987cc31165a5ebba829ad8fccd","modified":1662730130507},{"_id":"public/2022/09/05/js基础/promise原理与实现/index.html","hash":"5f6476dc239c34124b303e1474d9c9aa36fcb8f5","modified":1662730130507},{"_id":"public/2022/09/05/js基础/防抖与节流/index.html","hash":"dd55e9ea8ec5dc74c8e15cfdab43003e07a5fb6c","modified":1662730130507},{"_id":"public/images/example.jpeg","hash":"bba9700be9e7a9571948d89d60869f2756ff4b8b","modified":1662730130507},{"_id":"source/_posts/js基础/new操作符的作用.md","hash":"0907b04f2ec78ea101f1a7926614e80297b04139","modified":1663503436891},{"_id":"source/_posts/浏览器相关/浏览器的渲染过程.md","hash":"70b8705cf8b62eb4af5ae5dff21135bb553354dd","modified":1663518316576},{"_id":"source/_posts/计算机基础/计算机网络/缓存.md","hash":"d71cdbd630de1b0838fbc51aa3052a42789d2f32","modified":1663503596274},{"_id":"source/_posts/浏览器相关/从浏览器输入网址到渲染的流程.md","hash":"6868b930410e2753bac97b1a4dd1298d845828d8","modified":1663518154998},{"_id":"source/images/browerFlow.png","hash":"8c617dc93bd48de1081e34a5eb3b559db6a4081c","modified":1663518229368}],"Category":[{"name":"混合开发","_id":"cl7j9g8a20003b55zdh31d54i"},{"name":"测试","parent":"cl7j9g8a20003b55zdh31d54i","_id":"cl7jatev60000145z45naezs0"},{"name":"js基础","_id":"cl7os3e3d0001eo5zb7nu1780"},{"name":"计算机基础","_id":"cl7os5di40009eo5zeo8y48j2"},{"name":"计算机网络","parent":"cl7os5di40009eo5zeo8y48j2","_id":"cl7os5di5000ceo5zf04g4a2y"},{"name":"js","_id":"cl7uij7uu0001jnjg2o4hbudg"},{"name":"前端框架","_id":"cl80ago0j0003ah5z05wnaktk"},{"name":"React","parent":"cl80ago0j0003ah5z05wnaktk","_id":"cl80ago0k0008ah5z1k2s1ypc"},{"name":"浏览器","_id":"cl87jvz5800061x5zb46xgt02"}],"Data":[],"Page":[{"title":"分类","date":"2022-09-01T16:54:50.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-09-02 00:54:50\nlayout: \"categories\"\n---\n","updated":"2022-09-01T16:57:19.408Z","path":"categories/index.html","_id":"cl7jafqk70000d25z1qqt9ov5","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标题","date":"2022-09-01T16:55:06.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标题\ndate: 2022-09-02 00:55:06\nlayout: \"tags\"\n---\n","updated":"2022-09-01T16:57:23.247Z","path":"tags/index.html","_id":"cl7jafqk90001d25z729ofo0f","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n11\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n11\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-06-13T15:39:21.540Z","updated":"2022-09-09T13:52:48.302Z","_id":"cl7j9g89x0000b55z9ttldkb0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>11</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>11</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"防抖与节流","date":"2022-09-05T12:00:00.000Z","_content":"\n# 区分\n\n- 防抖：在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。\n- 节流：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。\n\n# 实现\n\n## 防抖\n\n```javascript\n   /**\n    * @param fn 输入函数\n    * @param time 延时\n    */\n   function debounce(fn,time){\n       let timer=null;\n       return function(...args){\n            clearTimeout(timer);\n           timer=setTimeout(()=>{\n               fn.call(this,..args)\n           },time)\n       }\n   }\n```\n\n## 节流\n\n```javascript\n   /**\n    * @param fn 输入函数\n    * @param time 延时\n    */\n   function debounce(fn,time){\n       let flag=false;\n       return function(...args){\n        if(flag){\n            return;\n        }\n        flag=true;\n        fn.call(this,..args)\n        setTimeout(()=>{\n            flag=false;\n        },time)\n\n       }\n   }\n```\n\n# React 中防抖节流 hook 的实现\n\n由于在 react 函数组件中，组件渲染执行 render 时都会生成一个新函数，传统的用于生成防抖函数的 debounce 与节流函数并不能满足这种场景\n\n主要原理：使用 useRef 保留对最新函数的引用\n\n## 防抖\n\n```js\nfunction useDebounceFn(fn, time, dep = []) {\n  const { current } = useRef();\n  current.fn = fn;\n  const debounced = useMemo(() => {\n    return debounce(function (...args) {\n      current.fn.call(this, ...args);\n    }, time);\n  }, [time, ...dep]);\n  // 优化，可以对umount阶段做处理\n  return debounced;\n}\n\n//debounce的副作用\nfunction useDebounceEffect(effect, time, dep) {\n  const fn = useDebounceFn(effect, time, []);\n  useEffect(() => {\n    fn();\n  }, [fn, ...dep]);\n}\n```\n\n## 节流\n\n```js\nfunction useThrottle(fn, time) {\n  const { current } = useRef();\n  current.fn = fn;\n  const throttled = useMemo(() => {\n    return throttle(function (...args) {\n      current.fn.call(this, ...args);\n    }, time);\n  }, [time, ...dep]);\n  // 优化，可以对umount阶段做处理\n  return throttled;\n}\n```\n","source":"_posts/js基础/防抖与节流.md","raw":"---\ntitle: 防抖与节流\ndate: 2022-09-05 20:00:00\ncategories:\n  - js基础\ntags:\n  - js\n  - 函数\n  - 性能优化\n---\n\n# 区分\n\n- 防抖：在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。\n- 节流：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。\n\n# 实现\n\n## 防抖\n\n```javascript\n   /**\n    * @param fn 输入函数\n    * @param time 延时\n    */\n   function debounce(fn,time){\n       let timer=null;\n       return function(...args){\n            clearTimeout(timer);\n           timer=setTimeout(()=>{\n               fn.call(this,..args)\n           },time)\n       }\n   }\n```\n\n## 节流\n\n```javascript\n   /**\n    * @param fn 输入函数\n    * @param time 延时\n    */\n   function debounce(fn,time){\n       let flag=false;\n       return function(...args){\n        if(flag){\n            return;\n        }\n        flag=true;\n        fn.call(this,..args)\n        setTimeout(()=>{\n            flag=false;\n        },time)\n\n       }\n   }\n```\n\n# React 中防抖节流 hook 的实现\n\n由于在 react 函数组件中，组件渲染执行 render 时都会生成一个新函数，传统的用于生成防抖函数的 debounce 与节流函数并不能满足这种场景\n\n主要原理：使用 useRef 保留对最新函数的引用\n\n## 防抖\n\n```js\nfunction useDebounceFn(fn, time, dep = []) {\n  const { current } = useRef();\n  current.fn = fn;\n  const debounced = useMemo(() => {\n    return debounce(function (...args) {\n      current.fn.call(this, ...args);\n    }, time);\n  }, [time, ...dep]);\n  // 优化，可以对umount阶段做处理\n  return debounced;\n}\n\n//debounce的副作用\nfunction useDebounceEffect(effect, time, dep) {\n  const fn = useDebounceFn(effect, time, []);\n  useEffect(() => {\n    fn();\n  }, [fn, ...dep]);\n}\n```\n\n## 节流\n\n```js\nfunction useThrottle(fn, time) {\n  const { current } = useRef();\n  current.fn = fn;\n  const throttled = useMemo(() => {\n    return throttle(function (...args) {\n      current.fn.call(this, ...args);\n    }, time);\n  }, [time, ...dep]);\n  // 优化，可以对umount阶段做处理\n  return throttled;\n}\n```\n","slug":"js基础/防抖与节流","published":1,"updated":"2022-09-05T13:08:59.454Z","_id":"cl7jaz9sf0002145zdij1gsje","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"区分\"><a href=\"#区分\" class=\"headerlink\" title=\"区分\"></a>区分</h1><ul>\n<li>防抖：在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</li>\n<li>节流：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</li>\n</ul>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn 输入函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> time 延时</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn,time</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)&#123;</span><br><span class=\"line\">         <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer=<span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,..<span class=\"property\">args</span>)</span><br><span class=\"line\">        &#125;,time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn 输入函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> time 延时</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn,time</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">     fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,..<span class=\"property\">args</span>)</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">         flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;,time)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"React-中防抖节流-hook-的实现\"><a href=\"#React-中防抖节流-hook-的实现\" class=\"headerlink\" title=\"React 中防抖节流 hook 的实现\"></a>React 中防抖节流 hook 的实现</h1><p>由于在 react 函数组件中，组件渲染执行 render 时都会生成一个新函数，传统的用于生成防抖函数的 debounce 与节流函数并不能满足这种场景</p>\n<p>主要原理：使用 useRef 保留对最新函数的引用</p>\n<h2 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useDebounceFn</span>(<span class=\"params\">fn, time, dep = []</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; current &#125; = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">  current.<span class=\"property\">fn</span> = fn;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> debounced = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      current.<span class=\"property\">fn</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, ...args);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;, [time, ...dep]);</span><br><span class=\"line\">  <span class=\"comment\">// 优化，可以对umount阶段做处理</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> debounced;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//debounce的副作用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useDebounceEffect</span>(<span class=\"params\">effect, time, dep</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"title function_\">useDebounceFn</span>(effect, time, []);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, [fn, ...dep]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useThrottle</span>(<span class=\"params\">fn, time</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; current &#125; = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">  current.<span class=\"property\">fn</span> = fn;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> throttled = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      current.<span class=\"property\">fn</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, ...args);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;, [time, ...dep]);</span><br><span class=\"line\">  <span class=\"comment\">// 优化，可以对umount阶段做处理</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> throttled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"区分\"><a href=\"#区分\" class=\"headerlink\" title=\"区分\"></a>区分</h1><ul>\n<li>防抖：在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</li>\n<li>节流：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</li>\n</ul>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn 输入函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> time 延时</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn,time</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)&#123;</span><br><span class=\"line\">         <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">        timer=<span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,..<span class=\"property\">args</span>)</span><br><span class=\"line\">        &#125;,time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> fn 输入函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> time 延时</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn,time</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">     fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>,..<span class=\"property\">args</span>)</span><br><span class=\"line\">     <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">         flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;,time)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"React-中防抖节流-hook-的实现\"><a href=\"#React-中防抖节流-hook-的实现\" class=\"headerlink\" title=\"React 中防抖节流 hook 的实现\"></a>React 中防抖节流 hook 的实现</h1><p>由于在 react 函数组件中，组件渲染执行 render 时都会生成一个新函数，传统的用于生成防抖函数的 debounce 与节流函数并不能满足这种场景</p>\n<p>主要原理：使用 useRef 保留对最新函数的引用</p>\n<h2 id=\"防抖-1\"><a href=\"#防抖-1\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useDebounceFn</span>(<span class=\"params\">fn, time, dep = []</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; current &#125; = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">  current.<span class=\"property\">fn</span> = fn;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> debounced = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      current.<span class=\"property\">fn</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, ...args);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;, [time, ...dep]);</span><br><span class=\"line\">  <span class=\"comment\">// 优化，可以对umount阶段做处理</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> debounced;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//debounce的副作用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useDebounceEffect</span>(<span class=\"params\">effect, time, dep</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"title function_\">useDebounceFn</span>(effect, time, []);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125;, [fn, ...dep]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流-1\"><a href=\"#节流-1\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useThrottle</span>(<span class=\"params\">fn, time</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; current &#125; = <span class=\"title function_\">useRef</span>();</span><br><span class=\"line\">  current.<span class=\"property\">fn</span> = fn;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> throttled = <span class=\"title function_\">useMemo</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">throttle</span>(<span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      current.<span class=\"property\">fn</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, ...args);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;, [time, ...dep]);</span><br><span class=\"line\">  <span class=\"comment\">// 优化，可以对umount阶段做处理</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> throttled;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"事件循环","date":"2022-09-11T13:00:00.000Z","_content":"\n# 浏览器\n\n## 宏任务与微任务\n\n宏任务\n\n- script(整体代码)\n- setTimeout\n- setInterval\n- setImmediate\n- I/O\n- UI render\n\n微任务\n\n- process.nextTick\n- Promise\n- Async/Await(实际就是 promise)\n- MutationObserver(html5 新特性)\n\n## async/await 执行顺序\n\n我们知道 async 隐式返回 Promise 作为结果的函数,那么可以简单理解为，await 后面的函数执行完毕时，await 会产生一个微任务(Promise.then 是微任务)。但是我们要注意这个微任务产生的时机，它是执行完 await 之后，直接跳出 async 函数，执行其他代码(此处就是协程的运作，A 暂停执行，控制权交给 B)。其他代码执行完毕后，再回到 async 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中。我们来看个例子：\n\n## 执行步骤\n\n- 从 宏任务 队列（例如 “script”）中出队（dequeue）并执行最早的任务。\n- 执行所有 微任务：\n- 当微任务队列非空时：\n- 出队（dequeue）并执行最早的微任务。\n- 如果有变更，则将变更渲染出来。\n- 如果宏任务队列为空，则休眠直到出现宏任务。\n- 转到步骤 1。\n\n# node\n\n事件循环是 Node.js 处理非阻塞 I/O 操作的机制——尽管 JavaScript 是单线程处理的——当有可能的时候，它们会把操作转移到系统内核中去。\n\n因为目前大多数内核都是多线程的，所以它们可以在后台处理多种操作。当其中的一个操作完成的时候，内核通知 Node.js 将适合的回调函数添加到 轮询 队列中等待时机执行。\n\n## 阶段\n\n- 定时器：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。\n- 待定回调：执行延迟到下一个循环迭代的 I/O 回调。\n- idle, prepare：仅系统内部使用。\n- 轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。\n- 检测：setImmediate() 回调函数在这里执行。\n- 关闭的回调函数：一些关闭的回调函数，如：socket.on('close', ...)\n\n## 轮询\n\n轮询 阶段有两个重要的功能：\n\n- 计算应该阻塞和轮询 I/O 的时间。\n- 然后，处理 轮询 队列里的事件。\n  当事件循环进入 轮询 阶段且 没有被调度的计时器时 ，将发生以下两种情况之一：\n\n如果 轮询 队列 不是空的 ，事件循环将循环访问回调队列并同步执行它们，直到队列已用尽，或者达到了与系统相关的硬性限制。\n\n如果 轮询 队列 是空的 ，还有两件事发生：\n\n如果脚本被 setImmediate() 调度，则事件循环将结束 轮询 阶段，并继续 检查 阶段以执行那些被调度的脚本。\n\n如果脚本 未被 setImmediate()调度，则事件循环将等待回调被添加到队列中，然后立即执行。\n\n一旦 轮询 队列为空，事件循环将检查 _已达到时间阈值的计时器_。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调。\n\n## setImmediate() 对比 setTimeout()\n\nsetImmediate() 和 setTimeout() 很类似，但是基于被调用的时机，他们也有不同表现。\n\n- setImmediate() 设计为一旦在当前 轮询 阶段完成， 就执行脚本。\n- setTimeout() 在最小阈值（ms 单位）过后运行脚本。\n\n## process.nextTick\n\n- process.nextTick() 从技术上讲不是事件循环的一部分\n- 在事件循环继续之前下个阶段允许开发者处理错误，清理所有不必要的资源，或者重新尝试请求。\n- 有时需要让回调在事件循环继续下个阶段之前运行 (At times it's necessary to allow a callback to run after the call stack has unwound but before the event loop continues.)。\n","source":"_posts/js基础/事件循环.md","raw":"---\ntitle: 事件循环\ndate: 2022-09-11 21:00:00\ncategories:\n  - js基础\ntags:\n  - 浏览器\n  - 事件循环\n---\n\n# 浏览器\n\n## 宏任务与微任务\n\n宏任务\n\n- script(整体代码)\n- setTimeout\n- setInterval\n- setImmediate\n- I/O\n- UI render\n\n微任务\n\n- process.nextTick\n- Promise\n- Async/Await(实际就是 promise)\n- MutationObserver(html5 新特性)\n\n## async/await 执行顺序\n\n我们知道 async 隐式返回 Promise 作为结果的函数,那么可以简单理解为，await 后面的函数执行完毕时，await 会产生一个微任务(Promise.then 是微任务)。但是我们要注意这个微任务产生的时机，它是执行完 await 之后，直接跳出 async 函数，执行其他代码(此处就是协程的运作，A 暂停执行，控制权交给 B)。其他代码执行完毕后，再回到 async 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中。我们来看个例子：\n\n## 执行步骤\n\n- 从 宏任务 队列（例如 “script”）中出队（dequeue）并执行最早的任务。\n- 执行所有 微任务：\n- 当微任务队列非空时：\n- 出队（dequeue）并执行最早的微任务。\n- 如果有变更，则将变更渲染出来。\n- 如果宏任务队列为空，则休眠直到出现宏任务。\n- 转到步骤 1。\n\n# node\n\n事件循环是 Node.js 处理非阻塞 I/O 操作的机制——尽管 JavaScript 是单线程处理的——当有可能的时候，它们会把操作转移到系统内核中去。\n\n因为目前大多数内核都是多线程的，所以它们可以在后台处理多种操作。当其中的一个操作完成的时候，内核通知 Node.js 将适合的回调函数添加到 轮询 队列中等待时机执行。\n\n## 阶段\n\n- 定时器：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。\n- 待定回调：执行延迟到下一个循环迭代的 I/O 回调。\n- idle, prepare：仅系统内部使用。\n- 轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。\n- 检测：setImmediate() 回调函数在这里执行。\n- 关闭的回调函数：一些关闭的回调函数，如：socket.on('close', ...)\n\n## 轮询\n\n轮询 阶段有两个重要的功能：\n\n- 计算应该阻塞和轮询 I/O 的时间。\n- 然后，处理 轮询 队列里的事件。\n  当事件循环进入 轮询 阶段且 没有被调度的计时器时 ，将发生以下两种情况之一：\n\n如果 轮询 队列 不是空的 ，事件循环将循环访问回调队列并同步执行它们，直到队列已用尽，或者达到了与系统相关的硬性限制。\n\n如果 轮询 队列 是空的 ，还有两件事发生：\n\n如果脚本被 setImmediate() 调度，则事件循环将结束 轮询 阶段，并继续 检查 阶段以执行那些被调度的脚本。\n\n如果脚本 未被 setImmediate()调度，则事件循环将等待回调被添加到队列中，然后立即执行。\n\n一旦 轮询 队列为空，事件循环将检查 _已达到时间阈值的计时器_。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调。\n\n## setImmediate() 对比 setTimeout()\n\nsetImmediate() 和 setTimeout() 很类似，但是基于被调用的时机，他们也有不同表现。\n\n- setImmediate() 设计为一旦在当前 轮询 阶段完成， 就执行脚本。\n- setTimeout() 在最小阈值（ms 单位）过后运行脚本。\n\n## process.nextTick\n\n- process.nextTick() 从技术上讲不是事件循环的一部分\n- 在事件循环继续之前下个阶段允许开发者处理错误，清理所有不必要的资源，或者重新尝试请求。\n- 有时需要让回调在事件循环继续下个阶段之前运行 (At times it's necessary to allow a callback to run after the call stack has unwound but before the event loop continues.)。\n","slug":"js基础/事件循环","published":1,"updated":"2022-09-11T16:20:42.201Z","_id":"cl7jb08iw0005145zfeaddhkk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h2 id=\"宏任务与微任务\"><a href=\"#宏任务与微任务\" class=\"headerlink\" title=\"宏任务与微任务\"></a>宏任务与微任务</h2><p>宏任务</p>\n<ul>\n<li>script(整体代码)</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI render</li>\n</ul>\n<p>微任务</p>\n<ul>\n<li>process.nextTick</li>\n<li>Promise</li>\n<li>Async/Await(实际就是 promise)</li>\n<li>MutationObserver(html5 新特性)</li>\n</ul>\n<h2 id=\"async-await-执行顺序\"><a href=\"#async-await-执行顺序\" class=\"headerlink\" title=\"async/await 执行顺序\"></a>async/await 执行顺序</h2><p>我们知道 async 隐式返回 Promise 作为结果的函数,那么可以简单理解为，await 后面的函数执行完毕时，await 会产生一个微任务(Promise.then 是微任务)。但是我们要注意这个微任务产生的时机，它是执行完 await 之后，直接跳出 async 函数，执行其他代码(此处就是协程的运作，A 暂停执行，控制权交给 B)。其他代码执行完毕后，再回到 async 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中。我们来看个例子：</p>\n<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2><ul>\n<li>从 宏任务 队列（例如 “script”）中出队（dequeue）并执行最早的任务。</li>\n<li>执行所有 微任务：</li>\n<li>当微任务队列非空时：</li>\n<li>出队（dequeue）并执行最早的微任务。</li>\n<li>如果有变更，则将变更渲染出来。</li>\n<li>如果宏任务队列为空，则休眠直到出现宏任务。</li>\n<li>转到步骤 1。</li>\n</ul>\n<h1 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h1><p>事件循环是 Node.js 处理非阻塞 I/O 操作的机制——尽管 JavaScript 是单线程处理的——当有可能的时候，它们会把操作转移到系统内核中去。</p>\n<p>因为目前大多数内核都是多线程的，所以它们可以在后台处理多种操作。当其中的一个操作完成的时候，内核通知 Node.js 将适合的回调函数添加到 轮询 队列中等待时机执行。</p>\n<h2 id=\"阶段\"><a href=\"#阶段\" class=\"headerlink\" title=\"阶段\"></a>阶段</h2><ul>\n<li>定时器：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。</li>\n<li>待定回调：执行延迟到下一个循环迭代的 I/O 回调。</li>\n<li>idle, prepare：仅系统内部使用。</li>\n<li>轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。</li>\n<li>检测：setImmediate() 回调函数在这里执行。</li>\n<li>关闭的回调函数：一些关闭的回调函数，如：socket.on(‘close’, …)</li>\n</ul>\n<h2 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h2><p>轮询 阶段有两个重要的功能：</p>\n<ul>\n<li>计算应该阻塞和轮询 I/O 的时间。</li>\n<li>然后，处理 轮询 队列里的事件。<br>当事件循环进入 轮询 阶段且 没有被调度的计时器时 ，将发生以下两种情况之一：</li>\n</ul>\n<p>如果 轮询 队列 不是空的 ，事件循环将循环访问回调队列并同步执行它们，直到队列已用尽，或者达到了与系统相关的硬性限制。</p>\n<p>如果 轮询 队列 是空的 ，还有两件事发生：</p>\n<p>如果脚本被 setImmediate() 调度，则事件循环将结束 轮询 阶段，并继续 检查 阶段以执行那些被调度的脚本。</p>\n<p>如果脚本 未被 setImmediate()调度，则事件循环将等待回调被添加到队列中，然后立即执行。</p>\n<p>一旦 轮询 队列为空，事件循环将检查 _已达到时间阈值的计时器_。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调。</p>\n<h2 id=\"setImmediate-对比-setTimeout\"><a href=\"#setImmediate-对比-setTimeout\" class=\"headerlink\" title=\"setImmediate() 对比 setTimeout()\"></a>setImmediate() 对比 setTimeout()</h2><p>setImmediate() 和 setTimeout() 很类似，但是基于被调用的时机，他们也有不同表现。</p>\n<ul>\n<li>setImmediate() 设计为一旦在当前 轮询 阶段完成， 就执行脚本。</li>\n<li>setTimeout() 在最小阈值（ms 单位）过后运行脚本。</li>\n</ul>\n<h2 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h2><ul>\n<li>process.nextTick() 从技术上讲不是事件循环的一部分</li>\n<li>在事件循环继续之前下个阶段允许开发者处理错误，清理所有不必要的资源，或者重新尝试请求。</li>\n<li>有时需要让回调在事件循环继续下个阶段之前运行 (At times it’s necessary to allow a callback to run after the call stack has unwound but before the event loop continues.)。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><h2 id=\"宏任务与微任务\"><a href=\"#宏任务与微任务\" class=\"headerlink\" title=\"宏任务与微任务\"></a>宏任务与微任务</h2><p>宏任务</p>\n<ul>\n<li>script(整体代码)</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI render</li>\n</ul>\n<p>微任务</p>\n<ul>\n<li>process.nextTick</li>\n<li>Promise</li>\n<li>Async/Await(实际就是 promise)</li>\n<li>MutationObserver(html5 新特性)</li>\n</ul>\n<h2 id=\"async-await-执行顺序\"><a href=\"#async-await-执行顺序\" class=\"headerlink\" title=\"async/await 执行顺序\"></a>async/await 执行顺序</h2><p>我们知道 async 隐式返回 Promise 作为结果的函数,那么可以简单理解为，await 后面的函数执行完毕时，await 会产生一个微任务(Promise.then 是微任务)。但是我们要注意这个微任务产生的时机，它是执行完 await 之后，直接跳出 async 函数，执行其他代码(此处就是协程的运作，A 暂停执行，控制权交给 B)。其他代码执行完毕后，再回到 async 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中。我们来看个例子：</p>\n<h2 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h2><ul>\n<li>从 宏任务 队列（例如 “script”）中出队（dequeue）并执行最早的任务。</li>\n<li>执行所有 微任务：</li>\n<li>当微任务队列非空时：</li>\n<li>出队（dequeue）并执行最早的微任务。</li>\n<li>如果有变更，则将变更渲染出来。</li>\n<li>如果宏任务队列为空，则休眠直到出现宏任务。</li>\n<li>转到步骤 1。</li>\n</ul>\n<h1 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h1><p>事件循环是 Node.js 处理非阻塞 I/O 操作的机制——尽管 JavaScript 是单线程处理的——当有可能的时候，它们会把操作转移到系统内核中去。</p>\n<p>因为目前大多数内核都是多线程的，所以它们可以在后台处理多种操作。当其中的一个操作完成的时候，内核通知 Node.js 将适合的回调函数添加到 轮询 队列中等待时机执行。</p>\n<h2 id=\"阶段\"><a href=\"#阶段\" class=\"headerlink\" title=\"阶段\"></a>阶段</h2><ul>\n<li>定时器：本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。</li>\n<li>待定回调：执行延迟到下一个循环迭代的 I/O 回调。</li>\n<li>idle, prepare：仅系统内部使用。</li>\n<li>轮询：检索新的 I/O 事件;执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。</li>\n<li>检测：setImmediate() 回调函数在这里执行。</li>\n<li>关闭的回调函数：一些关闭的回调函数，如：socket.on(‘close’, …)</li>\n</ul>\n<h2 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h2><p>轮询 阶段有两个重要的功能：</p>\n<ul>\n<li>计算应该阻塞和轮询 I/O 的时间。</li>\n<li>然后，处理 轮询 队列里的事件。<br>当事件循环进入 轮询 阶段且 没有被调度的计时器时 ，将发生以下两种情况之一：</li>\n</ul>\n<p>如果 轮询 队列 不是空的 ，事件循环将循环访问回调队列并同步执行它们，直到队列已用尽，或者达到了与系统相关的硬性限制。</p>\n<p>如果 轮询 队列 是空的 ，还有两件事发生：</p>\n<p>如果脚本被 setImmediate() 调度，则事件循环将结束 轮询 阶段，并继续 检查 阶段以执行那些被调度的脚本。</p>\n<p>如果脚本 未被 setImmediate()调度，则事件循环将等待回调被添加到队列中，然后立即执行。</p>\n<p>一旦 轮询 队列为空，事件循环将检查 _已达到时间阈值的计时器_。如果一个或多个计时器已准备就绪，则事件循环将绕回计时器阶段以执行这些计时器的回调。</p>\n<h2 id=\"setImmediate-对比-setTimeout\"><a href=\"#setImmediate-对比-setTimeout\" class=\"headerlink\" title=\"setImmediate() 对比 setTimeout()\"></a>setImmediate() 对比 setTimeout()</h2><p>setImmediate() 和 setTimeout() 很类似，但是基于被调用的时机，他们也有不同表现。</p>\n<ul>\n<li>setImmediate() 设计为一旦在当前 轮询 阶段完成， 就执行脚本。</li>\n<li>setTimeout() 在最小阈值（ms 单位）过后运行脚本。</li>\n</ul>\n<h2 id=\"process-nextTick\"><a href=\"#process-nextTick\" class=\"headerlink\" title=\"process.nextTick\"></a>process.nextTick</h2><ul>\n<li>process.nextTick() 从技术上讲不是事件循环的一部分</li>\n<li>在事件循环继续之前下个阶段允许开发者处理错误，清理所有不必要的资源，或者重新尝试请求。</li>\n<li>有时需要让回调在事件循环继续下个阶段之前运行 (At times it’s necessary to allow a callback to run after the call stack has unwound but before the event loop continues.)。</li>\n</ul>\n"},{"_content":"","source":"_posts/js基础/原型链与闭包.md","raw":"","slug":"js基础/原型链与闭包","published":1,"date":"2022-09-01T17:11:26.885Z","updated":"2022-09-01T17:11:26.885Z","_id":"cl7jb0ogx0006145zgwyx1uev","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/css基础/居中方式.md","raw":"","slug":"css基础/居中方式","published":1,"date":"2022-09-01T17:12:26.338Z","updated":"2022-09-01T17:12:26.338Z","_id":"cl7jb1yf50007145z14fhbay7","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/css基础/移动端css适配.md","raw":"","slug":"css基础/移动端css适配","published":1,"date":"2022-09-01T17:12:37.633Z","updated":"2022-09-01T17:12:37.633Z","_id":"cl7jb26zc0008145z4h0ncwdd","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/算法/堆排序.md","raw":"","slug":"算法/堆排序","published":1,"date":"2022-09-01T17:13:03.549Z","updated":"2022-09-01T17:13:03.549Z","_id":"cl7jb2r4t0009145z2d825h98","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/算法/归并排序.md","raw":"","slug":"算法/归并排序","published":1,"date":"2022-09-01T17:13:09.966Z","updated":"2022-09-01T17:13:09.966Z","_id":"cl7jb2w08000a145z49l68bjv","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react生命周期","date":"2022-09-13T13:00:00.000Z","_content":"\n# 什么是虚拟 dom\n\n虚拟 dom 是一个表示真实 dom 的 js 对象\n\n- 数据修改->更新 dom\n- 数据修改->更新虚拟 dom->更新 dom\n\n## 什么是 diff 算法\n\nDiff 算法是一种对比算法。对比两者是旧虚拟 DOM 和新虚拟 DOM，对比出是哪个虚拟节点更改了，找出这个虚拟节点，并只更新这个虚拟节点所对应的真实节点，而不用更新其他数据没发生改变的节点，实现精准地更新真实 DOM，进而提高效率。\n\n# 策略\n\n- tree 层级\n- component 层级\n- element 层级\n\n## tree 层级\n\nDOM 节点跨层级的操作不做优化，只会对相同层级的节点进行比较\n\n## component 层级\n\n如果是同一个类的组件，则会继续往下 diff 运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的\n\n## element 层级\n\n对于比较同一层级的节点们，每个节点在对应的层级用唯一的 key 作为标识\n","source":"_posts/前端框架/虚拟dom与diff.md","raw":"---\ntitle: react生命周期\ndate: 2022-09-13 21:00:00\ncategories:\n  - 前端框架\ntags:\n  - Diff\n  - virtual dom\n---\n\n# 什么是虚拟 dom\n\n虚拟 dom 是一个表示真实 dom 的 js 对象\n\n- 数据修改->更新 dom\n- 数据修改->更新虚拟 dom->更新 dom\n\n## 什么是 diff 算法\n\nDiff 算法是一种对比算法。对比两者是旧虚拟 DOM 和新虚拟 DOM，对比出是哪个虚拟节点更改了，找出这个虚拟节点，并只更新这个虚拟节点所对应的真实节点，而不用更新其他数据没发生改变的节点，实现精准地更新真实 DOM，进而提高效率。\n\n# 策略\n\n- tree 层级\n- component 层级\n- element 层级\n\n## tree 层级\n\nDOM 节点跨层级的操作不做优化，只会对相同层级的节点进行比较\n\n## component 层级\n\n如果是同一个类的组件，则会继续往下 diff 运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的\n\n## element 层级\n\n对于比较同一层级的节点们，每个节点在对应的层级用唯一的 key 作为标识\n","slug":"前端框架/虚拟dom与diff","published":1,"updated":"2022-09-13T16:40:23.599Z","_id":"cl7jb4h74000g145zhprz09zs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是虚拟-dom\"><a href=\"#什么是虚拟-dom\" class=\"headerlink\" title=\"什么是虚拟 dom\"></a>什么是虚拟 dom</h1><p>虚拟 dom 是一个表示真实 dom 的 js 对象</p>\n<ul>\n<li>数据修改-&gt;更新 dom</li>\n<li>数据修改-&gt;更新虚拟 dom-&gt;更新 dom</li>\n</ul>\n<h2 id=\"什么是-diff-算法\"><a href=\"#什么是-diff-算法\" class=\"headerlink\" title=\"什么是 diff 算法\"></a>什么是 diff 算法</h2><p>Diff 算法是一种对比算法。对比两者是旧虚拟 DOM 和新虚拟 DOM，对比出是哪个虚拟节点更改了，找出这个虚拟节点，并只更新这个虚拟节点所对应的真实节点，而不用更新其他数据没发生改变的节点，实现精准地更新真实 DOM，进而提高效率。</p>\n<h1 id=\"策略\"><a href=\"#策略\" class=\"headerlink\" title=\"策略\"></a>策略</h1><ul>\n<li>tree 层级</li>\n<li>component 层级</li>\n<li>element 层级</li>\n</ul>\n<h2 id=\"tree-层级\"><a href=\"#tree-层级\" class=\"headerlink\" title=\"tree 层级\"></a>tree 层级</h2><p>DOM 节点跨层级的操作不做优化，只会对相同层级的节点进行比较</p>\n<h2 id=\"component-层级\"><a href=\"#component-层级\" class=\"headerlink\" title=\"component 层级\"></a>component 层级</h2><p>如果是同一个类的组件，则会继续往下 diff 运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的</p>\n<h2 id=\"element-层级\"><a href=\"#element-层级\" class=\"headerlink\" title=\"element 层级\"></a>element 层级</h2><p>对于比较同一层级的节点们，每个节点在对应的层级用唯一的 key 作为标识</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是虚拟-dom\"><a href=\"#什么是虚拟-dom\" class=\"headerlink\" title=\"什么是虚拟 dom\"></a>什么是虚拟 dom</h1><p>虚拟 dom 是一个表示真实 dom 的 js 对象</p>\n<ul>\n<li>数据修改-&gt;更新 dom</li>\n<li>数据修改-&gt;更新虚拟 dom-&gt;更新 dom</li>\n</ul>\n<h2 id=\"什么是-diff-算法\"><a href=\"#什么是-diff-算法\" class=\"headerlink\" title=\"什么是 diff 算法\"></a>什么是 diff 算法</h2><p>Diff 算法是一种对比算法。对比两者是旧虚拟 DOM 和新虚拟 DOM，对比出是哪个虚拟节点更改了，找出这个虚拟节点，并只更新这个虚拟节点所对应的真实节点，而不用更新其他数据没发生改变的节点，实现精准地更新真实 DOM，进而提高效率。</p>\n<h1 id=\"策略\"><a href=\"#策略\" class=\"headerlink\" title=\"策略\"></a>策略</h1><ul>\n<li>tree 层级</li>\n<li>component 层级</li>\n<li>element 层级</li>\n</ul>\n<h2 id=\"tree-层级\"><a href=\"#tree-层级\" class=\"headerlink\" title=\"tree 层级\"></a>tree 层级</h2><p>DOM 节点跨层级的操作不做优化，只会对相同层级的节点进行比较</p>\n<h2 id=\"component-层级\"><a href=\"#component-层级\" class=\"headerlink\" title=\"component 层级\"></a>component 层级</h2><p>如果是同一个类的组件，则会继续往下 diff 运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的</p>\n<h2 id=\"element-层级\"><a href=\"#element-层级\" class=\"headerlink\" title=\"element 层级\"></a>element 层级</h2><p>对于比较同一层级的节点们，每个节点在对应的层级用唯一的 key 作为标识</p>\n"},{"title":"http协议","date":"2022-09-05T13:00:00.000Z","_content":"\n# http 协议\n\n# 1.0\n\n# 1.1\n\n# 2.0\n","source":"_posts/计算机基础/计算机网络/http.md","raw":"---\ntitle: http协议\ndate: 2022-09-05 21:00:00\ncategories:\n  - 计算机基础\n  - 计算机网络\ntags:\n  - http\n---\n\n# http 协议\n\n# 1.0\n\n# 1.1\n\n# 2.0\n","slug":"计算机基础/计算机网络/http","published":1,"updated":"2022-09-05T16:39:40.179Z","_id":"cl7jb4mj5000h145zcw651268","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"http-协议\"><a href=\"#http-协议\" class=\"headerlink\" title=\"http 协议\"></a>http 协议</h1><h1 id=\"1-0\"><a href=\"#1-0\" class=\"headerlink\" title=\"1.0\"></a>1.0</h1><h1 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h1><h1 id=\"2-0\"><a href=\"#2-0\" class=\"headerlink\" title=\"2.0\"></a>2.0</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"http-协议\"><a href=\"#http-协议\" class=\"headerlink\" title=\"http 协议\"></a>http 协议</h1><h1 id=\"1-0\"><a href=\"#1-0\" class=\"headerlink\" title=\"1.0\"></a>1.0</h1><h1 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1.1\"></a>1.1</h1><h1 id=\"2-0\"><a href=\"#2-0\" class=\"headerlink\" title=\"2.0\"></a>2.0</h1>"},{"title":"三次握手四次挥手","date":"2022-09-05T13:00:00.000Z","_content":"","source":"_posts/计算机基础/计算机网络/三次握手四次挥手.md","raw":"---\ntitle: 三次握手四次挥手\ndate: 2022-09-05 21:00:00\ncategories:\n  - 计算机基础\n  - 计算机网络\ntags:\n  - http\n  - tcp\n---\n","slug":"计算机基础/计算机网络/三次握手四次挥手","published":1,"updated":"2022-09-05T16:40:38.721Z","_id":"cl7jb4xz6000i145zbzvu1qf1","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/混合开发/jsbridge.md","raw":"","slug":"混合开发/jsbridge","published":1,"date":"2022-09-01T17:15:10.389Z","updated":"2022-09-01T17:15:10.389Z","_id":"cl7jb5gxc000j145z5dvmclxf","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/混合开发/离线包原理.md","raw":"","slug":"混合开发/离线包原理","published":1,"date":"2022-09-01T17:15:43.657Z","updated":"2022-09-01T17:15:43.657Z","_id":"cl7jb670f000k145z01q98nts","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/混合开发/跨端框架.md","raw":"","slug":"混合开发/跨端框架","published":1,"date":"2022-09-01T17:16:04.173Z","updated":"2022-09-01T17:16:04.173Z","_id":"cl7jb6mgb000l145zgtw4fw22","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/计算机基础/操作系统/进程与线程.md","raw":"","slug":"计算机基础/操作系统/进程与线程","published":1,"date":"2022-09-01T17:17:22.397Z","updated":"2022-09-01T17:17:22.397Z","_id":"cl7jb8as8000m145zef8gg0el","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/前端框架/Vue/Vue2与Vue3.md","raw":"","slug":"前端框架/Vue/Vue2与Vue3","published":1,"date":"2022-09-01T17:18:03.431Z","updated":"2022-09-01T17:18:03.431Z","_id":"cl7jb96iu000o145zel75a140","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/设计模式/单例模式.md","raw":"","slug":"设计模式/单例模式","published":1,"date":"2022-09-01T17:18:15.015Z","updated":"2022-09-01T17:18:15.015Z","_id":"cl7jb9fdi000p145z1xtvgxr1","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/设计模式/工厂模式.md","raw":"","slug":"设计模式/工厂模式","published":1,"date":"2022-09-01T17:18:21.432Z","updated":"2022-09-01T17:18:21.432Z","_id":"cl7jb9kc3000q145zbv788ndk","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/node相关/node基础.md","raw":"","slug":"node相关/node基础","published":1,"date":"2022-09-01T17:18:39.871Z","updated":"2022-09-01T17:18:39.871Z","_id":"cl7jba94h000s145zbb1d6f17","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/前端框架/Vue/vue基础.md","raw":"","slug":"前端框架/Vue/vue基础","published":1,"date":"2022-09-01T17:13:42.516Z","updated":"2022-09-01T17:13:42.516Z","_id":"cl7jbahg8000t145zas3p0toc","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/前端框架/Vue/vue生命周期.md","raw":"","slug":"前端框架/Vue/vue生命周期","published":1,"date":"2022-09-01T17:13:24.565Z","updated":"2022-09-01T17:13:24.565Z","_id":"cl7jbamqh000u145z4dtpho6k","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react生命周期","date":"2022-09-13T13:00:00.000Z","_content":"\n# 图谱\n\n<iframe style=\"width:100%;height:1000px\" src=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"></iframe>\n","source":"_posts/前端框架/React/react生命周期.md","raw":"---\ntitle: react生命周期\ndate: 2022-09-13 21:00:00\ncategories:\n  - 前端框架\n  - React\ntags:\n  - React\n  - 生命周期\n---\n\n# 图谱\n\n<iframe style=\"width:100%;height:1000px\" src=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"></iframe>\n","slug":"前端框架/React/react生命周期","published":1,"updated":"2022-09-13T14:28:40.480Z","_id":"cl7jbartb000v145z6clw3r3r","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"图谱\"><a href=\"#图谱\" class=\"headerlink\" title=\"图谱\"></a>图谱</h1><iframe style=\"width:100%;height:1000px\" src=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"></iframe>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图谱\"><a href=\"#图谱\" class=\"headerlink\" title=\"图谱\"></a>图谱</h1><iframe style=\"width:100%;height:1000px\" src=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"></iframe>\n"},{"title":"react的Fiber架构","date":"2022-09-13T13:00:00.000Z","_content":"\n# 为什么\n\nReact 16 之前，Reconcilation 是同步的、递归执行的。也就是说这是基于函数’调用栈‘的 Reconcilation 算法，因此通常也称它为 Stack Reconcilation\n\n# 数据结构\n\n## Fiber root\n\n```js\ntype BaseFiberRootProperties = {|\n  // root节点，render方法接收的第二个参数\n  containerInfo: any,\n  // 只有在持久更新中会用到，也就是不支持增量更新的平台，react-dom不会用到\n  pendingChildren: any,\n  // 当前应用对应的Fiber对象，是Root Fiber\n  current: Fiber,\n\n  // 一下的优先级是用来区分\n  // 1) 没有提交(committed)的任务\n  // 2) 没有提交的挂起任务\n  // 3) 没有提交的可能被挂起的任务\n  // 我们选择不追踪每个单独的阻塞登记，为了兼顾性能\n  // The earliest and latest priority levels that are suspended from committing.\n  // 最老和新的在提交的时候被挂起的任务\n  earliestSuspendedTime: ExpirationTime,\n  latestSuspendedTime: ExpirationTime,\n  // The earliest and latest priority levels that are not known to be suspended.\n  // 最老和最新的不确定是否会挂起的优先级（所有任务进来一开始都是这个状态）\n  earliestPendingTime: ExpirationTime,\n  latestPendingTime: ExpirationTime,\n  // The latest priority level that was pinged by a resolved promise and can\n  // be retried.\n  // 最新的通过一个promise被reslove并且可以重新尝试的优先级\n  latestPingedTime: ExpirationTime,\n\n  // 如果有错误被抛出并且没有更多的更新存在，我们尝试在处理错误前同步重新从头渲染\n  // 在`renderRoot`出现无法处理的错误时会被设置为`true`\n  didError: boolean,\n\n  // 正在等待提交的任务的`expirationTime`\n  pendingCommitExpirationTime: ExpirationTime,\n  // 已经完成的任务的FiberRoot对象，如果你只有一个Root，那他永远只可能是这个Root对应的Fiber，或者是null\n  // 在commit阶段只会处理这个值对应的任务\n  finishedWork: Fiber | null,\n  // 在任务被挂起的时候通过setTimeout设置的返回内容，用来下一次如果有新的任务挂起时清理还没触发的timeout\n  timeoutHandle: TimeoutHandle | NoTimeout,\n  // 顶层context对象，只有主动调用`renderSubtreeIntoContainer`时才会有用\n  context: Object | null,\n  pendingContext: Object | null,\n  // 用来确定第一次渲染的时候是否需要融合\n  +hydrate: boolean,\n  // 当前root上剩余的过期时间\n  // TODO: 提到renderer里面区处理\n  nextExpirationTimeToWorkOn: ExpirationTime,\n  // 当前更新对应的过期时间\n  expirationTime: ExpirationTime,\n  // List of top-level batches. This list indicates whether a commit should be\n  // deferred. Also contains completion callbacks.\n  // TODO: Lift this into the renderer\n  // 顶层批次（批处理任务？）这个变量指明一个commit是否应该被推迟\n  // 同时包括完成之后的回调\n  // 貌似用在测试的时候？\n  firstBatch: Batch | null,\n  // root之间关联的链表结构\n  nextScheduledRoot: FiberRoot | null,\n|};\n```\n\n## Fiber\n\n```js\n// Fiber对应一个组件需要被处理或者已经处理了，一个组件可以有一个或者多个Fiber\ntype Fiber = {\n  // 标记不同的组件类型\n  tag: WorkTag,\n\n  // ReactElement里面的key\n  key: null | string,\n\n  // ReactElement.type，也就是我们调用`createElement`的第一个参数\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  // 异步组件resolved之后返回的内容，一般是`function`或者`class`\n  type: any,\n\n  // The local state associated with this fiber.\n  // 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）\n  stateNode: any,\n\n  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回\n  return: Fiber | null,\n\n  // 单链表树结构\n  // 指向自己的第一个子节点\n  child: Fiber | null,\n  // 指向自己的兄弟结构\n  // 兄弟节点的return指向同一个父节点\n  sibling: Fiber | null,\n  index: number,\n\n  // ref属性\n  ref: null | (((handle: mixed) => void) & {_stringRef: ?string}) | RefObject,\n\n  // 新的变动带来的新的props\n  pendingProps: any,\n  // 上一次渲染完成之后的props\n  memoizedProps: any,\n\n  // 该Fiber对应的组件产生的Update会存放在这个队列里面\n  updateQueue: UpdateQueue<any> | null,\n\n  // 上一次渲染的时候的state\n  memoizedState: any,\n\n  // 一个列表，存放这个Fiber依赖的context\n  firstContextDependency: ContextDependency<mixed> | null,\n\n  // 用来描述当前Fiber和他子树的`Bitfield`\n  // 共存的模式表示这个子树是否默认是异步渲染的\n  // Fiber被创建的时候他会继承父Fiber\n  // 其他的标识也可以在创建的时候被设置\n  // 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前\n  mode: TypeOfMode,\n\n  // Effect\n  // 用来记录Side Effect\n  effectTag: SideEffectTag,\n\n  // 单链表用来快速查找下一个side effect\n  nextEffect: Fiber | null,\n\n  // 子树中第一个side effect\n  firstEffect: Fiber | null,\n  // 子树中最后一个side effect\n  lastEffect: Fiber | null,\n\n  // 代表任务在未来的哪个时间点应该被完成\n  // 不包括他的子树产生的任务\n  expirationTime: ExpirationTime,\n\n  // 快速确定子树中是否有不在等待的变化\n  childExpirationTime: ExpirationTime,\n\n  // 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber\n  // 我们称他为`current <==> workInProgress`\n  // 在渲染完成之后他们会交换位置\n  alternate: Fiber | null,\n\n  // 下面是调试相关的，收集每个Fiber和子树渲染时间的\n\n  actualDuration?: number,\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number,\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number,\n\n  // Sum of base times for all descedents of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number,\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number,\n  _debugSource?: Source | null,\n  _debugOwner?: Fiber | null,\n  _debugIsCurrentlyTiming?: boolean,\n|};\n```\n\n# fiber 的生成\n\n## 初始化\n\n## 更新\n","source":"_posts/前端框架/React/react的Fiber架构.md","raw":"---\ntitle: react的Fiber架构\ndate: 2022-09-13 21:00:00\ncategories:\n  - 前端框架\n  - React\ntags:\n  - React\n  - Fiber\n---\n\n# 为什么\n\nReact 16 之前，Reconcilation 是同步的、递归执行的。也就是说这是基于函数’调用栈‘的 Reconcilation 算法，因此通常也称它为 Stack Reconcilation\n\n# 数据结构\n\n## Fiber root\n\n```js\ntype BaseFiberRootProperties = {|\n  // root节点，render方法接收的第二个参数\n  containerInfo: any,\n  // 只有在持久更新中会用到，也就是不支持增量更新的平台，react-dom不会用到\n  pendingChildren: any,\n  // 当前应用对应的Fiber对象，是Root Fiber\n  current: Fiber,\n\n  // 一下的优先级是用来区分\n  // 1) 没有提交(committed)的任务\n  // 2) 没有提交的挂起任务\n  // 3) 没有提交的可能被挂起的任务\n  // 我们选择不追踪每个单独的阻塞登记，为了兼顾性能\n  // The earliest and latest priority levels that are suspended from committing.\n  // 最老和新的在提交的时候被挂起的任务\n  earliestSuspendedTime: ExpirationTime,\n  latestSuspendedTime: ExpirationTime,\n  // The earliest and latest priority levels that are not known to be suspended.\n  // 最老和最新的不确定是否会挂起的优先级（所有任务进来一开始都是这个状态）\n  earliestPendingTime: ExpirationTime,\n  latestPendingTime: ExpirationTime,\n  // The latest priority level that was pinged by a resolved promise and can\n  // be retried.\n  // 最新的通过一个promise被reslove并且可以重新尝试的优先级\n  latestPingedTime: ExpirationTime,\n\n  // 如果有错误被抛出并且没有更多的更新存在，我们尝试在处理错误前同步重新从头渲染\n  // 在`renderRoot`出现无法处理的错误时会被设置为`true`\n  didError: boolean,\n\n  // 正在等待提交的任务的`expirationTime`\n  pendingCommitExpirationTime: ExpirationTime,\n  // 已经完成的任务的FiberRoot对象，如果你只有一个Root，那他永远只可能是这个Root对应的Fiber，或者是null\n  // 在commit阶段只会处理这个值对应的任务\n  finishedWork: Fiber | null,\n  // 在任务被挂起的时候通过setTimeout设置的返回内容，用来下一次如果有新的任务挂起时清理还没触发的timeout\n  timeoutHandle: TimeoutHandle | NoTimeout,\n  // 顶层context对象，只有主动调用`renderSubtreeIntoContainer`时才会有用\n  context: Object | null,\n  pendingContext: Object | null,\n  // 用来确定第一次渲染的时候是否需要融合\n  +hydrate: boolean,\n  // 当前root上剩余的过期时间\n  // TODO: 提到renderer里面区处理\n  nextExpirationTimeToWorkOn: ExpirationTime,\n  // 当前更新对应的过期时间\n  expirationTime: ExpirationTime,\n  // List of top-level batches. This list indicates whether a commit should be\n  // deferred. Also contains completion callbacks.\n  // TODO: Lift this into the renderer\n  // 顶层批次（批处理任务？）这个变量指明一个commit是否应该被推迟\n  // 同时包括完成之后的回调\n  // 貌似用在测试的时候？\n  firstBatch: Batch | null,\n  // root之间关联的链表结构\n  nextScheduledRoot: FiberRoot | null,\n|};\n```\n\n## Fiber\n\n```js\n// Fiber对应一个组件需要被处理或者已经处理了，一个组件可以有一个或者多个Fiber\ntype Fiber = {\n  // 标记不同的组件类型\n  tag: WorkTag,\n\n  // ReactElement里面的key\n  key: null | string,\n\n  // ReactElement.type，也就是我们调用`createElement`的第一个参数\n  elementType: any,\n\n  // The resolved function/class/ associated with this fiber.\n  // 异步组件resolved之后返回的内容，一般是`function`或者`class`\n  type: any,\n\n  // The local state associated with this fiber.\n  // 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）\n  stateNode: any,\n\n  // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回\n  return: Fiber | null,\n\n  // 单链表树结构\n  // 指向自己的第一个子节点\n  child: Fiber | null,\n  // 指向自己的兄弟结构\n  // 兄弟节点的return指向同一个父节点\n  sibling: Fiber | null,\n  index: number,\n\n  // ref属性\n  ref: null | (((handle: mixed) => void) & {_stringRef: ?string}) | RefObject,\n\n  // 新的变动带来的新的props\n  pendingProps: any,\n  // 上一次渲染完成之后的props\n  memoizedProps: any,\n\n  // 该Fiber对应的组件产生的Update会存放在这个队列里面\n  updateQueue: UpdateQueue<any> | null,\n\n  // 上一次渲染的时候的state\n  memoizedState: any,\n\n  // 一个列表，存放这个Fiber依赖的context\n  firstContextDependency: ContextDependency<mixed> | null,\n\n  // 用来描述当前Fiber和他子树的`Bitfield`\n  // 共存的模式表示这个子树是否默认是异步渲染的\n  // Fiber被创建的时候他会继承父Fiber\n  // 其他的标识也可以在创建的时候被设置\n  // 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前\n  mode: TypeOfMode,\n\n  // Effect\n  // 用来记录Side Effect\n  effectTag: SideEffectTag,\n\n  // 单链表用来快速查找下一个side effect\n  nextEffect: Fiber | null,\n\n  // 子树中第一个side effect\n  firstEffect: Fiber | null,\n  // 子树中最后一个side effect\n  lastEffect: Fiber | null,\n\n  // 代表任务在未来的哪个时间点应该被完成\n  // 不包括他的子树产生的任务\n  expirationTime: ExpirationTime,\n\n  // 快速确定子树中是否有不在等待的变化\n  childExpirationTime: ExpirationTime,\n\n  // 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber\n  // 我们称他为`current <==> workInProgress`\n  // 在渲染完成之后他们会交换位置\n  alternate: Fiber | null,\n\n  // 下面是调试相关的，收集每个Fiber和子树渲染时间的\n\n  actualDuration?: number,\n\n  // If the Fiber is currently active in the \"render\" phase,\n  // This marks the time at which the work began.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  actualStartTime?: number,\n\n  // Duration of the most recent render time for this Fiber.\n  // This value is not updated when we bailout for memoization purposes.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  selfBaseDuration?: number,\n\n  // Sum of base times for all descedents of this Fiber.\n  // This value bubbles up during the \"complete\" phase.\n  // This field is only set when the enableProfilerTimer flag is enabled.\n  treeBaseDuration?: number,\n\n  // Conceptual aliases\n  // workInProgress : Fiber ->  alternate The alternate used for reuse happens\n  // to be the same as work in progress.\n  // __DEV__ only\n  _debugID?: number,\n  _debugSource?: Source | null,\n  _debugOwner?: Fiber | null,\n  _debugIsCurrentlyTiming?: boolean,\n|};\n```\n\n# fiber 的生成\n\n## 初始化\n\n## 更新\n","slug":"前端框架/React/react的Fiber架构","published":1,"updated":"2022-09-13T17:37:52.904Z","_id":"cl7jbax90000w145z54qrfssa","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h1><p>React 16 之前，Reconcilation 是同步的、递归执行的。也就是说这是基于函数’调用栈‘的 Reconcilation 算法，因此通常也称它为 Stack Reconcilation</p>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"Fiber-root\"><a href=\"#Fiber-root\" class=\"headerlink\" title=\"Fiber root\"></a>Fiber root</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">BaseFiberRootProperties</span> = &#123;|</span><br><span class=\"line\">  <span class=\"comment\">// root节点，render方法接收的第二个参数</span></span><br><span class=\"line\">  <span class=\"attr\">containerInfo</span>: any,</span><br><span class=\"line\">  <span class=\"comment\">// 只有在持久更新中会用到，也就是不支持增量更新的平台，react-dom不会用到</span></span><br><span class=\"line\">  <span class=\"attr\">pendingChildren</span>: any,</span><br><span class=\"line\">  <span class=\"comment\">// 当前应用对应的Fiber对象，是Root Fiber</span></span><br><span class=\"line\">  <span class=\"attr\">current</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一下的优先级是用来区分</span></span><br><span class=\"line\">  <span class=\"comment\">// 1) 没有提交(committed)的任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 2) 没有提交的挂起任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 3) 没有提交的可能被挂起的任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们选择不追踪每个单独的阻塞登记，为了兼顾性能</span></span><br><span class=\"line\">  <span class=\"comment\">// The earliest and latest priority levels that are suspended from committing.</span></span><br><span class=\"line\">  <span class=\"comment\">// 最老和新的在提交的时候被挂起的任务</span></span><br><span class=\"line\">  <span class=\"attr\">earliestSuspendedTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"attr\">latestSuspendedTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// The earliest and latest priority levels that are not known to be suspended.</span></span><br><span class=\"line\">  <span class=\"comment\">// 最老和最新的不确定是否会挂起的优先级（所有任务进来一开始都是这个状态）</span></span><br><span class=\"line\">  <span class=\"attr\">earliestPendingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"attr\">latestPendingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// The latest priority level that was pinged by a resolved promise and can</span></span><br><span class=\"line\">  <span class=\"comment\">// be retried.</span></span><br><span class=\"line\">  <span class=\"comment\">// 最新的通过一个promise被reslove并且可以重新尝试的优先级</span></span><br><span class=\"line\">  <span class=\"attr\">latestPingedTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果有错误被抛出并且没有更多的更新存在，我们尝试在处理错误前同步重新从头渲染</span></span><br><span class=\"line\">  <span class=\"comment\">// 在`renderRoot`出现无法处理的错误时会被设置为`true`</span></span><br><span class=\"line\">  <span class=\"attr\">didError</span>: boolean,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 正在等待提交的任务的`expirationTime`</span></span><br><span class=\"line\">  <span class=\"attr\">pendingCommitExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 已经完成的任务的FiberRoot对象，如果你只有一个Root，那他永远只可能是这个Root对应的Fiber，或者是null</span></span><br><span class=\"line\">  <span class=\"comment\">// 在commit阶段只会处理这个值对应的任务</span></span><br><span class=\"line\">  <span class=\"attr\">finishedWork</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 在任务被挂起的时候通过setTimeout设置的返回内容，用来下一次如果有新的任务挂起时清理还没触发的timeout</span></span><br><span class=\"line\">  <span class=\"attr\">timeoutHandle</span>: <span class=\"title class_\">TimeoutHandle</span> | <span class=\"title class_\">NoTimeout</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 顶层context对象，只有主动调用`renderSubtreeIntoContainer`时才会有用</span></span><br><span class=\"line\">  <span class=\"attr\">context</span>: <span class=\"title class_\">Object</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">pendingContext</span>: <span class=\"title class_\">Object</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 用来确定第一次渲染的时候是否需要融合</span></span><br><span class=\"line\">  +<span class=\"attr\">hydrate</span>: boolean,</span><br><span class=\"line\">  <span class=\"comment\">// 当前root上剩余的过期时间</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 提到renderer里面区处理</span></span><br><span class=\"line\">  <span class=\"attr\">nextExpirationTimeToWorkOn</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 当前更新对应的过期时间</span></span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// List of top-level batches. This list indicates whether a commit should be</span></span><br><span class=\"line\">  <span class=\"comment\">// deferred. Also contains completion callbacks.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Lift this into the renderer</span></span><br><span class=\"line\">  <span class=\"comment\">// 顶层批次（批处理任务？）这个变量指明一个commit是否应该被推迟</span></span><br><span class=\"line\">  <span class=\"comment\">// 同时包括完成之后的回调</span></span><br><span class=\"line\">  <span class=\"comment\">// 貌似用在测试的时候？</span></span><br><span class=\"line\">  <span class=\"attr\">firstBatch</span>: <span class=\"title class_\">Batch</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// root之间关联的链表结构</span></span><br><span class=\"line\">  <span class=\"attr\">nextScheduledRoot</span>: <span class=\"title class_\">FiberRoot</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Fiber对应一个组件需要被处理或者已经处理了，一个组件可以有一个或者多个Fiber</span></span><br><span class=\"line\">type <span class=\"title class_\">Fiber</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标记不同的组件类型</span></span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"title class_\">WorkTag</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ReactElement里面的key</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"literal\">null</span> | string,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ReactElement.type，也就是我们调用`createElement`的第一个参数</span></span><br><span class=\"line\">  <span class=\"attr\">elementType</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The resolved function/class/ associated with this fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// 异步组件resolved之后返回的内容，一般是`function`或者`class`</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The local state associated with this fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）</span></span><br><span class=\"line\">  <span class=\"attr\">stateNode</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回</span></span><br><span class=\"line\">  <span class=\"attr\">return</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 单链表树结构</span></span><br><span class=\"line\">  <span class=\"comment\">// 指向自己的第一个子节点</span></span><br><span class=\"line\">  <span class=\"attr\">child</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 指向自己的兄弟结构</span></span><br><span class=\"line\">  <span class=\"comment\">// 兄弟节点的return指向同一个父节点</span></span><br><span class=\"line\">  <span class=\"attr\">sibling</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">index</span>: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ref属性</span></span><br><span class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"literal\">null</span> | ((<span class=\"function\">(<span class=\"params\">handle: mixed</span>) =&gt;</span> <span class=\"keyword\">void</span>) &amp; &#123;<span class=\"attr\">_stringRef</span>: ?string&#125;) | <span class=\"title class_\">RefObject</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 新的变动带来的新的props</span></span><br><span class=\"line\">  <span class=\"attr\">pendingProps</span>: any,</span><br><span class=\"line\">  <span class=\"comment\">// 上一次渲染完成之后的props</span></span><br><span class=\"line\">  <span class=\"attr\">memoizedProps</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 该Fiber对应的组件产生的Update会存放在这个队列里面</span></span><br><span class=\"line\">  <span class=\"attr\">updateQueue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;any&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 上一次渲染的时候的state</span></span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个列表，存放这个Fiber依赖的context</span></span><br><span class=\"line\">  <span class=\"attr\">firstContextDependency</span>: <span class=\"title class_\">ContextDependency</span>&lt;mixed&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用来描述当前Fiber和他子树的`Bitfield`</span></span><br><span class=\"line\">  <span class=\"comment\">// 共存的模式表示这个子树是否默认是异步渲染的</span></span><br><span class=\"line\">  <span class=\"comment\">// Fiber被创建的时候他会继承父Fiber</span></span><br><span class=\"line\">  <span class=\"comment\">// 其他的标识也可以在创建的时候被设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"title class_\">TypeOfMode</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Effect</span></span><br><span class=\"line\">  <span class=\"comment\">// 用来记录Side Effect</span></span><br><span class=\"line\">  <span class=\"attr\">effectTag</span>: <span class=\"title class_\">SideEffectTag</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 单链表用来快速查找下一个side effect</span></span><br><span class=\"line\">  <span class=\"attr\">nextEffect</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 子树中第一个side effect</span></span><br><span class=\"line\">  <span class=\"attr\">firstEffect</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 子树中最后一个side effect</span></span><br><span class=\"line\">  <span class=\"attr\">lastEffect</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 代表任务在未来的哪个时间点应该被完成</span></span><br><span class=\"line\">  <span class=\"comment\">// 不包括他的子树产生的任务</span></span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 快速确定子树中是否有不在等待的变化</span></span><br><span class=\"line\">  <span class=\"attr\">childExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们称他为`current &lt;==&gt; workInProgress`</span></span><br><span class=\"line\">  <span class=\"comment\">// 在渲染完成之后他们会交换位置</span></span><br><span class=\"line\">  <span class=\"attr\">alternate</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 下面是调试相关的，收集每个Fiber和子树渲染时间的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  actualDuration?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If the Fiber is currently active in the &quot;render&quot; phase,</span></span><br><span class=\"line\">  <span class=\"comment\">// This marks the time at which the work began.</span></span><br><span class=\"line\">  <span class=\"comment\">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class=\"line\">  actualStartTime?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Duration of the most recent render time for this Fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// This value is not updated when we bailout for memoization purposes.</span></span><br><span class=\"line\">  <span class=\"comment\">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class=\"line\">  selfBaseDuration?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Sum of base times for all descedents of this Fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// This value bubbles up during the &quot;complete&quot; phase.</span></span><br><span class=\"line\">  <span class=\"comment\">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class=\"line\">  treeBaseDuration?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Conceptual aliases</span></span><br><span class=\"line\">  <span class=\"comment\">// workInProgress : Fiber -&gt;  alternate The alternate used for reuse happens</span></span><br><span class=\"line\">  <span class=\"comment\">// to be the same as work in progress.</span></span><br><span class=\"line\">  <span class=\"comment\">// __DEV__ only</span></span><br><span class=\"line\">  _debugID?: number,</span><br><span class=\"line\">  _debugSource?: <span class=\"title class_\">Source</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  _debugOwner?: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  _debugIsCurrentlyTiming?: boolean,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fiber-的生成\"><a href=\"#fiber-的生成\" class=\"headerlink\" title=\"fiber 的生成\"></a>fiber 的生成</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"为什么\"><a href=\"#为什么\" class=\"headerlink\" title=\"为什么\"></a>为什么</h1><p>React 16 之前，Reconcilation 是同步的、递归执行的。也就是说这是基于函数’调用栈‘的 Reconcilation 算法，因此通常也称它为 Stack Reconcilation</p>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"Fiber-root\"><a href=\"#Fiber-root\" class=\"headerlink\" title=\"Fiber root\"></a>Fiber root</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">BaseFiberRootProperties</span> = &#123;|</span><br><span class=\"line\">  <span class=\"comment\">// root节点，render方法接收的第二个参数</span></span><br><span class=\"line\">  <span class=\"attr\">containerInfo</span>: any,</span><br><span class=\"line\">  <span class=\"comment\">// 只有在持久更新中会用到，也就是不支持增量更新的平台，react-dom不会用到</span></span><br><span class=\"line\">  <span class=\"attr\">pendingChildren</span>: any,</span><br><span class=\"line\">  <span class=\"comment\">// 当前应用对应的Fiber对象，是Root Fiber</span></span><br><span class=\"line\">  <span class=\"attr\">current</span>: <span class=\"title class_\">Fiber</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一下的优先级是用来区分</span></span><br><span class=\"line\">  <span class=\"comment\">// 1) 没有提交(committed)的任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 2) 没有提交的挂起任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 3) 没有提交的可能被挂起的任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们选择不追踪每个单独的阻塞登记，为了兼顾性能</span></span><br><span class=\"line\">  <span class=\"comment\">// The earliest and latest priority levels that are suspended from committing.</span></span><br><span class=\"line\">  <span class=\"comment\">// 最老和新的在提交的时候被挂起的任务</span></span><br><span class=\"line\">  <span class=\"attr\">earliestSuspendedTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"attr\">latestSuspendedTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// The earliest and latest priority levels that are not known to be suspended.</span></span><br><span class=\"line\">  <span class=\"comment\">// 最老和最新的不确定是否会挂起的优先级（所有任务进来一开始都是这个状态）</span></span><br><span class=\"line\">  <span class=\"attr\">earliestPendingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"attr\">latestPendingTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// The latest priority level that was pinged by a resolved promise and can</span></span><br><span class=\"line\">  <span class=\"comment\">// be retried.</span></span><br><span class=\"line\">  <span class=\"comment\">// 最新的通过一个promise被reslove并且可以重新尝试的优先级</span></span><br><span class=\"line\">  <span class=\"attr\">latestPingedTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果有错误被抛出并且没有更多的更新存在，我们尝试在处理错误前同步重新从头渲染</span></span><br><span class=\"line\">  <span class=\"comment\">// 在`renderRoot`出现无法处理的错误时会被设置为`true`</span></span><br><span class=\"line\">  <span class=\"attr\">didError</span>: boolean,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 正在等待提交的任务的`expirationTime`</span></span><br><span class=\"line\">  <span class=\"attr\">pendingCommitExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 已经完成的任务的FiberRoot对象，如果你只有一个Root，那他永远只可能是这个Root对应的Fiber，或者是null</span></span><br><span class=\"line\">  <span class=\"comment\">// 在commit阶段只会处理这个值对应的任务</span></span><br><span class=\"line\">  <span class=\"attr\">finishedWork</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 在任务被挂起的时候通过setTimeout设置的返回内容，用来下一次如果有新的任务挂起时清理还没触发的timeout</span></span><br><span class=\"line\">  <span class=\"attr\">timeoutHandle</span>: <span class=\"title class_\">TimeoutHandle</span> | <span class=\"title class_\">NoTimeout</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 顶层context对象，只有主动调用`renderSubtreeIntoContainer`时才会有用</span></span><br><span class=\"line\">  <span class=\"attr\">context</span>: <span class=\"title class_\">Object</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">pendingContext</span>: <span class=\"title class_\">Object</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 用来确定第一次渲染的时候是否需要融合</span></span><br><span class=\"line\">  +<span class=\"attr\">hydrate</span>: boolean,</span><br><span class=\"line\">  <span class=\"comment\">// 当前root上剩余的过期时间</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 提到renderer里面区处理</span></span><br><span class=\"line\">  <span class=\"attr\">nextExpirationTimeToWorkOn</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 当前更新对应的过期时间</span></span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\">  <span class=\"comment\">// List of top-level batches. This list indicates whether a commit should be</span></span><br><span class=\"line\">  <span class=\"comment\">// deferred. Also contains completion callbacks.</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Lift this into the renderer</span></span><br><span class=\"line\">  <span class=\"comment\">// 顶层批次（批处理任务？）这个变量指明一个commit是否应该被推迟</span></span><br><span class=\"line\">  <span class=\"comment\">// 同时包括完成之后的回调</span></span><br><span class=\"line\">  <span class=\"comment\">// 貌似用在测试的时候？</span></span><br><span class=\"line\">  <span class=\"attr\">firstBatch</span>: <span class=\"title class_\">Batch</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// root之间关联的链表结构</span></span><br><span class=\"line\">  <span class=\"attr\">nextScheduledRoot</span>: <span class=\"title class_\">FiberRoot</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Fiber对应一个组件需要被处理或者已经处理了，一个组件可以有一个或者多个Fiber</span></span><br><span class=\"line\">type <span class=\"title class_\">Fiber</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标记不同的组件类型</span></span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"title class_\">WorkTag</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ReactElement里面的key</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"literal\">null</span> | string,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ReactElement.type，也就是我们调用`createElement`的第一个参数</span></span><br><span class=\"line\">  <span class=\"attr\">elementType</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The resolved function/class/ associated with this fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// 异步组件resolved之后返回的内容，一般是`function`或者`class`</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The local state associated with this fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点）</span></span><br><span class=\"line\">  <span class=\"attr\">stateNode</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回</span></span><br><span class=\"line\">  <span class=\"attr\">return</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 单链表树结构</span></span><br><span class=\"line\">  <span class=\"comment\">// 指向自己的第一个子节点</span></span><br><span class=\"line\">  <span class=\"attr\">child</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 指向自己的兄弟结构</span></span><br><span class=\"line\">  <span class=\"comment\">// 兄弟节点的return指向同一个父节点</span></span><br><span class=\"line\">  <span class=\"attr\">sibling</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">index</span>: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ref属性</span></span><br><span class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"literal\">null</span> | ((<span class=\"function\">(<span class=\"params\">handle: mixed</span>) =&gt;</span> <span class=\"keyword\">void</span>) &amp; &#123;<span class=\"attr\">_stringRef</span>: ?string&#125;) | <span class=\"title class_\">RefObject</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 新的变动带来的新的props</span></span><br><span class=\"line\">  <span class=\"attr\">pendingProps</span>: any,</span><br><span class=\"line\">  <span class=\"comment\">// 上一次渲染完成之后的props</span></span><br><span class=\"line\">  <span class=\"attr\">memoizedProps</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 该Fiber对应的组件产生的Update会存放在这个队列里面</span></span><br><span class=\"line\">  <span class=\"attr\">updateQueue</span>: <span class=\"title class_\">UpdateQueue</span>&lt;any&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 上一次渲染的时候的state</span></span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: any,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个列表，存放这个Fiber依赖的context</span></span><br><span class=\"line\">  <span class=\"attr\">firstContextDependency</span>: <span class=\"title class_\">ContextDependency</span>&lt;mixed&gt; | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用来描述当前Fiber和他子树的`Bitfield`</span></span><br><span class=\"line\">  <span class=\"comment\">// 共存的模式表示这个子树是否默认是异步渲染的</span></span><br><span class=\"line\">  <span class=\"comment\">// Fiber被创建的时候他会继承父Fiber</span></span><br><span class=\"line\">  <span class=\"comment\">// 其他的标识也可以在创建的时候被设置</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是在创建之后不应该再被修改，特别是他的子Fiber创建之前</span></span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"title class_\">TypeOfMode</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Effect</span></span><br><span class=\"line\">  <span class=\"comment\">// 用来记录Side Effect</span></span><br><span class=\"line\">  <span class=\"attr\">effectTag</span>: <span class=\"title class_\">SideEffectTag</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 单链表用来快速查找下一个side effect</span></span><br><span class=\"line\">  <span class=\"attr\">nextEffect</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 子树中第一个side effect</span></span><br><span class=\"line\">  <span class=\"attr\">firstEffect</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 子树中最后一个side effect</span></span><br><span class=\"line\">  <span class=\"attr\">lastEffect</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 代表任务在未来的哪个时间点应该被完成</span></span><br><span class=\"line\">  <span class=\"comment\">// 不包括他的子树产生的任务</span></span><br><span class=\"line\">  <span class=\"attr\">expirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 快速确定子树中是否有不在等待的变化</span></span><br><span class=\"line\">  <span class=\"attr\">childExpirationTime</span>: <span class=\"title class_\">ExpirationTime</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们称他为`current &lt;==&gt; workInProgress`</span></span><br><span class=\"line\">  <span class=\"comment\">// 在渲染完成之后他们会交换位置</span></span><br><span class=\"line\">  <span class=\"attr\">alternate</span>: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 下面是调试相关的，收集每个Fiber和子树渲染时间的</span></span><br><span class=\"line\"></span><br><span class=\"line\">  actualDuration?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// If the Fiber is currently active in the &quot;render&quot; phase,</span></span><br><span class=\"line\">  <span class=\"comment\">// This marks the time at which the work began.</span></span><br><span class=\"line\">  <span class=\"comment\">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class=\"line\">  actualStartTime?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Duration of the most recent render time for this Fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// This value is not updated when we bailout for memoization purposes.</span></span><br><span class=\"line\">  <span class=\"comment\">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class=\"line\">  selfBaseDuration?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Sum of base times for all descedents of this Fiber.</span></span><br><span class=\"line\">  <span class=\"comment\">// This value bubbles up during the &quot;complete&quot; phase.</span></span><br><span class=\"line\">  <span class=\"comment\">// This field is only set when the enableProfilerTimer flag is enabled.</span></span><br><span class=\"line\">  treeBaseDuration?: number,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Conceptual aliases</span></span><br><span class=\"line\">  <span class=\"comment\">// workInProgress : Fiber -&gt;  alternate The alternate used for reuse happens</span></span><br><span class=\"line\">  <span class=\"comment\">// to be the same as work in progress.</span></span><br><span class=\"line\">  <span class=\"comment\">// __DEV__ only</span></span><br><span class=\"line\">  _debugID?: number,</span><br><span class=\"line\">  _debugSource?: <span class=\"title class_\">Source</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  _debugOwner?: <span class=\"title class_\">Fiber</span> | <span class=\"literal\">null</span>,</span><br><span class=\"line\">  _debugIsCurrentlyTiming?: boolean,</span><br><span class=\"line\">|&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fiber-的生成\"><a href=\"#fiber-的生成\" class=\"headerlink\" title=\"fiber 的生成\"></a>fiber 的生成</h1><h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2>"},{"_content":"","source":"_posts/前端框架/React/react基础.md","raw":"","slug":"前端框架/React/react基础","published":1,"date":"2022-09-01T17:13:34.315Z","updated":"2022-09-01T17:13:34.315Z","_id":"cl7jbb3q8000x145z9e4x2swv","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/node相关/Node线程池.md","raw":"","slug":"node相关/Node线程池","published":1,"date":"2022-09-01T17:21:03.056Z","updated":"2022-09-01T17:21:03.056Z","_id":"cl7jbdaf50011145z3wfh55y8","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/node相关/node中的事件循环.md","raw":"","slug":"node相关/node中的事件循环","published":1,"date":"2022-09-01T17:20:56.482Z","updated":"2022-09-01T17:20:56.482Z","_id":"cl7jbdhfj0012145zhl3n5uhr","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"_posts/node相关/node中libuv.md","raw":"","slug":"node相关/node中libuv","published":1,"date":"2022-09-01T17:20:14.991Z","updated":"2022-09-01T17:20:14.991Z","_id":"cl7jbds6z0013145zh93a9y3p","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"promise原理与实现","date":"2022-09-05T13:00:00.000Z","_content":"\n# 异步编程背景\n\njs 引擎建立在单线程事件循环的概念上，JS 引擎在同一时刻只能执行一段代码\n\n- 事件模型:\n  当用户点击一个按钮或按下键盘上的一个键时，一个事件（ event ）——例如 onclick —— 就被触发了;当 button 被点 击，赋值给 onclick 的函数就被添加到作业队列的尾部，并在队列前部所有任务结束之后再 执行。\n\n```js\nlet button = document.getElementById(\"my-btn\");\nbutton.onclick = function (event) {\n  console.log(\"Clicked\");\n};\n```\n\n- 回调模式:\n  当 Node.js 被创建时，它通过普及回调函数编程模式提升了异步编程模型。回调函数模式类 似于事件模型，因为异步代码也会在后面的一个时间点才执行。不同之处在于需要调用的函 数（即回调函数）是作为参数传入的，\n\n```js\nreadFile(\"example.txt\", function (err, contents) {\n  if (err) {\n    throw err;\n  }\n  console.log(contents);\n});\nconsole.log(\"Hi!\");\n```\n\n- Promise 是为异步操作的结果所准备的占位符。函数可以返回一个 Promise，而不必订阅一个 事件或向函数传递一个回调参数，就\n\n# 生命周期\n\n## pending\n\n一个挂起的 Promise 也被认为是未决的（ unsettled ）。上个例子中的 Promise 在 readFile() 函数返回它的时候就是处在挂起态。一旦异步操作结束， Promise 就会被认为是已决的（ settled ），并进入两种可能状态之一\n\n## fulfilled\n\nPromise 的异步操作已成功结束；\n\n## rejected\n\nPromise 的异步操作未成功结束，可能是一个错误，或由其他原 因导致\n\n# 串联的 promise\n\n# 运行多个 promise\n\n## Promise.all\n\nPromise.all() 方法接收单个可迭代对象（如数组）作为参数，并返回一个 Promise 。这个可迭代对象的元素都是 Promise ，只有在它们都完成后，所返回的 Promise 才会被完成。\n\n## Promise.race\n\nPromise.race() 提供了监视多个 Promise 的一个稍微不同的方法。此方法也接受一个包含需监视的 Promise 的可迭代对象，并返回一个新的 Promise ，但一旦来源 Promise 中有一个被解决，所返回的 Promise 就会立刻被解决。与等待所有 Promise 完成的 Promise.all() 方法 不同，在来源 Promise 中任意一个被完成时， Promise.race() 方法所返回的 Promise 就能 作出响应\n\n# 简易实现\n\n```js\nenum PromiseState{\n  FULLFILLED=\"fullfilled\",\n  PENDING=\"pending\",\n  REJECTED=\"rejected\"\n}\nclass MyPromise {\n  //promise的状态\n  promiseState = PromiseState.PENDING;\n  //promise的结果\n  promiseResult = null;\n  // 成功的回调函数数组\n  onFullfilledCallbacks = [];\n  // 失败的回调函数数组\n  onRejectedCallbacks = [];\n  static resolve(val) {\n    return new MyPromise((resolve) => resolve(val));\n  }\n  static reject(val) {\n    return new MyPromise((_, reject) => reject(val));\n  }\n  static all(pArr) {\n    const result = [];\n    let successCount = 0;\n    return new MyPromise((resolve, reject) => {\n        //TODO 判断promise类型\n      pArr.forEach((p, index) => {\n        p.then(\n          (v) => {\n            successCount++;\n\n            result[index] = v;\n            if (successCount === pArr.length) {\n              resolve(result);\n            }\n          },\n          (e) => {\n            reject(e);\n          }\n        );\n      });\n    });\n  }\n  static race(pArr) {\n    return new MyPromise((resolve, reject) => {\n        //TODO 判断promise类型\n      pArr.forEach((p, index) => {\n        p.then(\n          (v) => {\n            resolve(v);\n          },\n          (e) => {\n            reject(e);\n          }\n        );\n      });\n    });\n  }\n  constructor(executor) {\n    this.initBind();\n    try {\n      //拦截错误\n      executor(this.selfResolve, this.selfReject);\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  //绑定函数指向\n  initBind() {\n    this.selfResolve = this.selfResolve.bind(this);\n    this.selfReject = this.selfReject.bind(this);\n  }\n  selfResolve(val) {\n    if (this.promiseState !== PromiseState.PENDING) {\n      return;\n    }\n    this.promiseState = PromiseState.FULLFILLED;\n    this.promiseResult = val;\n    //执行then注册任务的回调\n    while (this.onFullfilledCallbacks.length) {\n      this.onFullfilledCallbacks.shift()(this.promiseResult);\n    }\n  }\n  selfReject(reason) {\n    if (this.promiseState !== PromiseState.PENDING) {\n      return;\n    }\n    this.promiseState = PromiseState.REJECTED;\n    this.promiseResult = reason;\n    while (this.onRejectedCallbacks.length) {\n      this.onRejectedCallbacks.shift()(this.promiseResult);\n    }\n  }\n  then(onFullfilled, onRejected) {\n    onFullfilled =\n      typeof onFullfilled === \"function\" ? onFullfilled : (val) => val;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (reason) => {\n            throw reason;\n          };\n\n    // 不考虑链式传递，对promise结果处理\n    // if (this.promiseState === PromiseState.FULLFILLED) {\n    //   onFullfilled(this.promiseResult);\n    // } else if (this.promiseState === PromiseState.REJECTED) {\n    //   onRejected(this.promiseResult);\n    // } else if (this.promiseState === PromiseState.PENDING) {\n    //   this.onFullfilledCallbacks.push(onFullfilled);\n    //   this.onRejectedCallbacks.push(onRejected);\n    // }\n\n    //实现链式传递，返回一个promise\n    return new MyPromise((resolve, reject) => {\n      const resolvePromise = (cb) => {\n       //保证不是立即执行的，可以使用queueMicrotask创建微任务\n       setTimeout(()=>{\n         try {\n           //取回调执行结果\n          const cbResult = cb(this.promiseResult);\n\n          if (cbResult instanceof MyPromise) {\n            cbResult.then(resolve, reject);\n          } else {\n            resolve(cbResult);\n          }\n        } catch (e) {\n          //抛出异常\n          reject(e);\n        }\n       })\n      };\n      if (this.promiseState === PromiseState.FULLFILLED) {\n        onFullfilled(this.promiseResult);\n      } else if (this.promiseState === PromiseState.REJECTED) {\n        onRejected(this.promiseResult);\n      } else if (this.promiseState === PromiseState.PENDING) {\n        this.onFullfilledCallbacks.push(onFullfilled);\n        this.onRejectedCallbacks.push(onRejected);\n      }\n    });\n  }\n}\n\n```\n\n## Promise.all\n\n## Promise.race\n","source":"_posts/js基础/promise原理与实现.md","raw":"---\ntitle: promise原理与实现\ndate: 2022-09-05 21:00:00\ncategories:\n  - js基础\ntags:\n  - js\n  - 异步编程\n  - promise\n---\n\n# 异步编程背景\n\njs 引擎建立在单线程事件循环的概念上，JS 引擎在同一时刻只能执行一段代码\n\n- 事件模型:\n  当用户点击一个按钮或按下键盘上的一个键时，一个事件（ event ）——例如 onclick —— 就被触发了;当 button 被点 击，赋值给 onclick 的函数就被添加到作业队列的尾部，并在队列前部所有任务结束之后再 执行。\n\n```js\nlet button = document.getElementById(\"my-btn\");\nbutton.onclick = function (event) {\n  console.log(\"Clicked\");\n};\n```\n\n- 回调模式:\n  当 Node.js 被创建时，它通过普及回调函数编程模式提升了异步编程模型。回调函数模式类 似于事件模型，因为异步代码也会在后面的一个时间点才执行。不同之处在于需要调用的函 数（即回调函数）是作为参数传入的，\n\n```js\nreadFile(\"example.txt\", function (err, contents) {\n  if (err) {\n    throw err;\n  }\n  console.log(contents);\n});\nconsole.log(\"Hi!\");\n```\n\n- Promise 是为异步操作的结果所准备的占位符。函数可以返回一个 Promise，而不必订阅一个 事件或向函数传递一个回调参数，就\n\n# 生命周期\n\n## pending\n\n一个挂起的 Promise 也被认为是未决的（ unsettled ）。上个例子中的 Promise 在 readFile() 函数返回它的时候就是处在挂起态。一旦异步操作结束， Promise 就会被认为是已决的（ settled ），并进入两种可能状态之一\n\n## fulfilled\n\nPromise 的异步操作已成功结束；\n\n## rejected\n\nPromise 的异步操作未成功结束，可能是一个错误，或由其他原 因导致\n\n# 串联的 promise\n\n# 运行多个 promise\n\n## Promise.all\n\nPromise.all() 方法接收单个可迭代对象（如数组）作为参数，并返回一个 Promise 。这个可迭代对象的元素都是 Promise ，只有在它们都完成后，所返回的 Promise 才会被完成。\n\n## Promise.race\n\nPromise.race() 提供了监视多个 Promise 的一个稍微不同的方法。此方法也接受一个包含需监视的 Promise 的可迭代对象，并返回一个新的 Promise ，但一旦来源 Promise 中有一个被解决，所返回的 Promise 就会立刻被解决。与等待所有 Promise 完成的 Promise.all() 方法 不同，在来源 Promise 中任意一个被完成时， Promise.race() 方法所返回的 Promise 就能 作出响应\n\n# 简易实现\n\n```js\nenum PromiseState{\n  FULLFILLED=\"fullfilled\",\n  PENDING=\"pending\",\n  REJECTED=\"rejected\"\n}\nclass MyPromise {\n  //promise的状态\n  promiseState = PromiseState.PENDING;\n  //promise的结果\n  promiseResult = null;\n  // 成功的回调函数数组\n  onFullfilledCallbacks = [];\n  // 失败的回调函数数组\n  onRejectedCallbacks = [];\n  static resolve(val) {\n    return new MyPromise((resolve) => resolve(val));\n  }\n  static reject(val) {\n    return new MyPromise((_, reject) => reject(val));\n  }\n  static all(pArr) {\n    const result = [];\n    let successCount = 0;\n    return new MyPromise((resolve, reject) => {\n        //TODO 判断promise类型\n      pArr.forEach((p, index) => {\n        p.then(\n          (v) => {\n            successCount++;\n\n            result[index] = v;\n            if (successCount === pArr.length) {\n              resolve(result);\n            }\n          },\n          (e) => {\n            reject(e);\n          }\n        );\n      });\n    });\n  }\n  static race(pArr) {\n    return new MyPromise((resolve, reject) => {\n        //TODO 判断promise类型\n      pArr.forEach((p, index) => {\n        p.then(\n          (v) => {\n            resolve(v);\n          },\n          (e) => {\n            reject(e);\n          }\n        );\n      });\n    });\n  }\n  constructor(executor) {\n    this.initBind();\n    try {\n      //拦截错误\n      executor(this.selfResolve, this.selfReject);\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n  //绑定函数指向\n  initBind() {\n    this.selfResolve = this.selfResolve.bind(this);\n    this.selfReject = this.selfReject.bind(this);\n  }\n  selfResolve(val) {\n    if (this.promiseState !== PromiseState.PENDING) {\n      return;\n    }\n    this.promiseState = PromiseState.FULLFILLED;\n    this.promiseResult = val;\n    //执行then注册任务的回调\n    while (this.onFullfilledCallbacks.length) {\n      this.onFullfilledCallbacks.shift()(this.promiseResult);\n    }\n  }\n  selfReject(reason) {\n    if (this.promiseState !== PromiseState.PENDING) {\n      return;\n    }\n    this.promiseState = PromiseState.REJECTED;\n    this.promiseResult = reason;\n    while (this.onRejectedCallbacks.length) {\n      this.onRejectedCallbacks.shift()(this.promiseResult);\n    }\n  }\n  then(onFullfilled, onRejected) {\n    onFullfilled =\n      typeof onFullfilled === \"function\" ? onFullfilled : (val) => val;\n    onRejected =\n      typeof onRejected === \"function\"\n        ? onRejected\n        : (reason) => {\n            throw reason;\n          };\n\n    // 不考虑链式传递，对promise结果处理\n    // if (this.promiseState === PromiseState.FULLFILLED) {\n    //   onFullfilled(this.promiseResult);\n    // } else if (this.promiseState === PromiseState.REJECTED) {\n    //   onRejected(this.promiseResult);\n    // } else if (this.promiseState === PromiseState.PENDING) {\n    //   this.onFullfilledCallbacks.push(onFullfilled);\n    //   this.onRejectedCallbacks.push(onRejected);\n    // }\n\n    //实现链式传递，返回一个promise\n    return new MyPromise((resolve, reject) => {\n      const resolvePromise = (cb) => {\n       //保证不是立即执行的，可以使用queueMicrotask创建微任务\n       setTimeout(()=>{\n         try {\n           //取回调执行结果\n          const cbResult = cb(this.promiseResult);\n\n          if (cbResult instanceof MyPromise) {\n            cbResult.then(resolve, reject);\n          } else {\n            resolve(cbResult);\n          }\n        } catch (e) {\n          //抛出异常\n          reject(e);\n        }\n       })\n      };\n      if (this.promiseState === PromiseState.FULLFILLED) {\n        onFullfilled(this.promiseResult);\n      } else if (this.promiseState === PromiseState.REJECTED) {\n        onRejected(this.promiseResult);\n      } else if (this.promiseState === PromiseState.PENDING) {\n        this.onFullfilledCallbacks.push(onFullfilled);\n        this.onRejectedCallbacks.push(onRejected);\n      }\n    });\n  }\n}\n\n```\n\n## Promise.all\n\n## Promise.race\n","slug":"js基础/promise原理与实现","published":1,"updated":"2022-09-11T16:20:45.641Z","_id":"cl7uij7us0000jnjgddrtdozk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"异步编程背景\"><a href=\"#异步编程背景\" class=\"headerlink\" title=\"异步编程背景\"></a>异步编程背景</h1><p>js 引擎建立在单线程事件循环的概念上，JS 引擎在同一时刻只能执行一段代码</p>\n<ul>\n<li>事件模型:<br>当用户点击一个按钮或按下键盘上的一个键时，一个事件（ event ）——例如 onclick —— 就被触发了;当 button 被点 击，赋值给 onclick 的函数就被添加到作业队列的尾部，并在队列前部所有任务结束之后再 执行。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;my-btn&quot;</span>);</span><br><span class=\"line\">button.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Clicked&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回调模式:<br>当 Node.js 被创建时，它通过普及回调函数编程模式提升了异步编程模型。回调函数模式类 似于事件模型，因为异步代码也会在后面的一个时间点才执行。不同之处在于需要调用的函 数（即回调函数）是作为参数传入的，</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;example.txt&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, contents</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(contents);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise 是为异步操作的结果所准备的占位符。函数可以返回一个 Promise，而不必订阅一个 事件或向函数传递一个回调参数，就</li>\n</ul>\n<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><h2 id=\"pending\"><a href=\"#pending\" class=\"headerlink\" title=\"pending\"></a>pending</h2><p>一个挂起的 Promise 也被认为是未决的（ unsettled ）。上个例子中的 Promise 在 readFile() 函数返回它的时候就是处在挂起态。一旦异步操作结束， Promise 就会被认为是已决的（ settled ），并进入两种可能状态之一</p>\n<h2 id=\"fulfilled\"><a href=\"#fulfilled\" class=\"headerlink\" title=\"fulfilled\"></a>fulfilled</h2><p>Promise 的异步操作已成功结束；</p>\n<h2 id=\"rejected\"><a href=\"#rejected\" class=\"headerlink\" title=\"rejected\"></a>rejected</h2><p>Promise 的异步操作未成功结束，可能是一个错误，或由其他原 因导致</p>\n<h1 id=\"串联的-promise\"><a href=\"#串联的-promise\" class=\"headerlink\" title=\"串联的 promise\"></a>串联的 promise</h1><h1 id=\"运行多个-promise\"><a href=\"#运行多个-promise\" class=\"headerlink\" title=\"运行多个 promise\"></a>运行多个 promise</h1><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h2><p>Promise.all() 方法接收单个可迭代对象（如数组）作为参数，并返回一个 Promise 。这个可迭代对象的元素都是 Promise ，只有在它们都完成后，所返回的 Promise 才会被完成。</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h2><p>Promise.race() 提供了监视多个 Promise 的一个稍微不同的方法。此方法也接受一个包含需监视的 Promise 的可迭代对象，并返回一个新的 Promise ，但一旦来源 Promise 中有一个被解决，所返回的 Promise 就会立刻被解决。与等待所有 Promise 完成的 Promise.all() 方法 不同，在来源 Promise 中任意一个被完成时， Promise.race() 方法所返回的 Promise 就能 作出响应</p>\n<h1 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">PromiseState</span>&#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">FULLFILLED</span>=<span class=\"string\">&quot;fullfilled&quot;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">PENDING</span>=<span class=\"string\">&quot;pending&quot;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">REJECTED</span>=<span class=\"string\">&quot;rejected&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//promise的状态</span></span><br><span class=\"line\">  promiseState = <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>;</span><br><span class=\"line\">  <span class=\"comment\">//promise的结果</span></span><br><span class=\"line\">  promiseResult = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 成功的回调函数数组</span></span><br><span class=\"line\">  onFullfilledCallbacks = [];</span><br><span class=\"line\">  <span class=\"comment\">// 失败的回调函数数组</span></span><br><span class=\"line\">  onRejectedCallbacks = [];</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(val));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">reject</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">_, reject</span>) =&gt;</span> <span class=\"title function_\">reject</span>(val));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">pArr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> successCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 判断promise类型</span></span><br><span class=\"line\">      pArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            successCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">            result[index] = v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (successCount === pArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">race</span>(<span class=\"params\">pArr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 判断promise类型</span></span><br><span class=\"line\">      pArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(v);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//拦截错误</span></span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">selfResolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">selfReject</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//绑定函数指向</span></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfResolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">selfResolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfReject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">selfReject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">selfResolve</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> !== <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> = <span class=\"title class_\">PromiseState</span>.<span class=\"property\">FULLFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span> = val;</span><br><span class=\"line\">    <span class=\"comment\">//执行then注册任务的回调</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFullfilledCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFullfilledCallbacks</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">selfReject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> !== <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> = <span class=\"title class_\">PromiseState</span>.<span class=\"property\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span> = reason;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFullfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    onFullfilled =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> onFullfilled === <span class=\"string\">&quot;function&quot;</span> ? onFullfilled : <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val;</span><br><span class=\"line\">    onRejected =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">        ? onRejected</span><br><span class=\"line\">        : <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不考虑链式传递，对promise结果处理</span></span><br><span class=\"line\">    <span class=\"comment\">// if (this.promiseState === PromiseState.FULLFILLED) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   onFullfilled(this.promiseResult);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else if (this.promiseState === PromiseState.REJECTED) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   onRejected(this.promiseResult);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else if (this.promiseState === PromiseState.PENDING) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.onFullfilledCallbacks.push(onFullfilled);</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.onRejectedCallbacks.push(onRejected);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实现链式传递，返回一个promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = (<span class=\"params\">cb</span>) =&gt; &#123;</span><br><span class=\"line\">       <span class=\"comment\">//保证不是立即执行的，可以使用queueMicrotask创建微任务</span></span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//取回调执行结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> cbResult = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cbResult <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">            cbResult.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(cbResult);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> === <span class=\"title class_\">PromiseState</span>.<span class=\"property\">FULLFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFullfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> === <span class=\"title class_\">PromiseState</span>.<span class=\"property\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> === <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFullfilledCallbacks</span>.<span class=\"title function_\">push</span>(onFullfilled);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h2><h2 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"异步编程背景\"><a href=\"#异步编程背景\" class=\"headerlink\" title=\"异步编程背景\"></a>异步编程背景</h1><p>js 引擎建立在单线程事件循环的概念上，JS 引擎在同一时刻只能执行一段代码</p>\n<ul>\n<li>事件模型:<br>当用户点击一个按钮或按下键盘上的一个键时，一个事件（ event ）——例如 onclick —— 就被触发了;当 button 被点 击，赋值给 onclick 的函数就被添加到作业队列的尾部，并在队列前部所有任务结束之后再 执行。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;my-btn&quot;</span>);</span><br><span class=\"line\">button.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Clicked&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回调模式:<br>当 Node.js 被创建时，它通过普及回调函数编程模式提升了异步编程模型。回调函数模式类 似于事件模型，因为异步代码也会在后面的一个时间点才执行。不同之处在于需要调用的函 数（即回调函数）是作为参数传入的，</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;example.txt&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err, contents</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(contents);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Promise 是为异步操作的结果所准备的占位符。函数可以返回一个 Promise，而不必订阅一个 事件或向函数传递一个回调参数，就</li>\n</ul>\n<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><h2 id=\"pending\"><a href=\"#pending\" class=\"headerlink\" title=\"pending\"></a>pending</h2><p>一个挂起的 Promise 也被认为是未决的（ unsettled ）。上个例子中的 Promise 在 readFile() 函数返回它的时候就是处在挂起态。一旦异步操作结束， Promise 就会被认为是已决的（ settled ），并进入两种可能状态之一</p>\n<h2 id=\"fulfilled\"><a href=\"#fulfilled\" class=\"headerlink\" title=\"fulfilled\"></a>fulfilled</h2><p>Promise 的异步操作已成功结束；</p>\n<h2 id=\"rejected\"><a href=\"#rejected\" class=\"headerlink\" title=\"rejected\"></a>rejected</h2><p>Promise 的异步操作未成功结束，可能是一个错误，或由其他原 因导致</p>\n<h1 id=\"串联的-promise\"><a href=\"#串联的-promise\" class=\"headerlink\" title=\"串联的 promise\"></a>串联的 promise</h1><h1 id=\"运行多个-promise\"><a href=\"#运行多个-promise\" class=\"headerlink\" title=\"运行多个 promise\"></a>运行多个 promise</h1><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h2><p>Promise.all() 方法接收单个可迭代对象（如数组）作为参数，并返回一个 Promise 。这个可迭代对象的元素都是 Promise ，只有在它们都完成后，所返回的 Promise 才会被完成。</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h2><p>Promise.race() 提供了监视多个 Promise 的一个稍微不同的方法。此方法也接受一个包含需监视的 Promise 的可迭代对象，并返回一个新的 Promise ，但一旦来源 Promise 中有一个被解决，所返回的 Promise 就会立刻被解决。与等待所有 Promise 完成的 Promise.all() 方法 不同，在来源 Promise 中任意一个被完成时， Promise.race() 方法所返回的 Promise 就能 作出响应</p>\n<h1 id=\"简易实现\"><a href=\"#简易实现\" class=\"headerlink\" title=\"简易实现\"></a>简易实现</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum <span class=\"title class_\">PromiseState</span>&#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">FULLFILLED</span>=<span class=\"string\">&quot;fullfilled&quot;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">PENDING</span>=<span class=\"string\">&quot;pending&quot;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">REJECTED</span>=<span class=\"string\">&quot;rejected&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyPromise</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//promise的状态</span></span><br><span class=\"line\">  promiseState = <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>;</span><br><span class=\"line\">  <span class=\"comment\">//promise的结果</span></span><br><span class=\"line\">  promiseResult = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 成功的回调函数数组</span></span><br><span class=\"line\">  onFullfilledCallbacks = [];</span><br><span class=\"line\">  <span class=\"comment\">// 失败的回调函数数组</span></span><br><span class=\"line\">  onRejectedCallbacks = [];</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(val));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">reject</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">_, reject</span>) =&gt;</span> <span class=\"title function_\">reject</span>(val));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">all</span>(<span class=\"params\">pArr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> successCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 判断promise类型</span></span><br><span class=\"line\">      pArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            successCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">            result[index] = v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (successCount === pArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">race</span>(<span class=\"params\">pArr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 判断promise类型</span></span><br><span class=\"line\">      pArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(v);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">initBind</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//拦截错误</span></span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">selfResolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">selfReject</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//绑定函数指向</span></span><br><span class=\"line\">  <span class=\"title function_\">initBind</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfResolve</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">selfResolve</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selfReject</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">selfReject</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">selfResolve</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> !== <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> = <span class=\"title class_\">PromiseState</span>.<span class=\"property\">FULLFILLED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span> = val;</span><br><span class=\"line\">    <span class=\"comment\">//执行then注册任务的回调</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onFullfilledCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onFullfilledCallbacks</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">selfReject</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> !== <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> = <span class=\"title class_\">PromiseState</span>.<span class=\"property\">REJECTED</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span> = reason;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">shift</span>()(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFullfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    onFullfilled =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> onFullfilled === <span class=\"string\">&quot;function&quot;</span> ? onFullfilled : <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> val;</span><br><span class=\"line\">    onRejected =</span><br><span class=\"line\">      <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&quot;function&quot;</span></span><br><span class=\"line\">        ? onRejected</span><br><span class=\"line\">        : <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> reason;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不考虑链式传递，对promise结果处理</span></span><br><span class=\"line\">    <span class=\"comment\">// if (this.promiseState === PromiseState.FULLFILLED) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   onFullfilled(this.promiseResult);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else if (this.promiseState === PromiseState.REJECTED) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   onRejected(this.promiseResult);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else if (this.promiseState === PromiseState.PENDING) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.onFullfilledCallbacks.push(onFullfilled);</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.onRejectedCallbacks.push(onRejected);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//实现链式传递，返回一个promise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">resolvePromise</span> = (<span class=\"params\">cb</span>) =&gt; &#123;</span><br><span class=\"line\">       <span class=\"comment\">//保证不是立即执行的，可以使用queueMicrotask创建微任务</span></span><br><span class=\"line\">       <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//取回调执行结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> cbResult = <span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cbResult <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">            cbResult.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(cbResult);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//抛出异常</span></span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> === <span class=\"title class_\">PromiseState</span>.<span class=\"property\">FULLFILLED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFullfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> === <span class=\"title class_\">PromiseState</span>.<span class=\"property\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">promiseResult</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">promiseState</span> === <span class=\"title class_\">PromiseState</span>.<span class=\"property\">PENDING</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onFullfilledCallbacks</span>.<span class=\"title function_\">push</span>(onFullfilled);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallbacks</span>.<span class=\"title function_\">push</span>(onRejected);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all-1\"><a href=\"#Promise-all-1\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h2><h2 id=\"Promise-race-1\"><a href=\"#Promise-race-1\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h2>"},{"_content":"","source":"_posts/算法/LRU.md","raw":"","slug":"算法/LRU","published":1,"date":"2022-09-05T14:24:35.150Z","updated":"2022-09-05T14:24:35.150Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7uij7ux0003jnjghsca52aa","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"new操作符的作用","date":"2022-09-13T13:00:00.000Z","_content":"\n- 在内存中创建一个新对象。\n- 这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性。\n- 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。\n- 执行构造函数内部的代码（给新对象添加属性）。\n- 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。\n","source":"_posts/js基础/new操作符的作用.md","raw":"---\ntitle: new操作符的作用\ndate: 2022-09-13 21:00:00\ncategories:\n  - js基础\ntags:\n  - js\n  - object\n---\n\n- 在内存中创建一个新对象。\n- 这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性。\n- 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。\n- 执行构造函数内部的代码（给新对象添加属性）。\n- 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。\n","slug":"js基础/new操作符的作用","published":1,"updated":"2022-09-18T12:17:16.891Z","_id":"cl80ago0b0000ah5z6pi63nbh","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>在内存中创建一个新对象。</li>\n<li>这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性。</li>\n<li>构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。</li>\n<li>执行构造函数内部的代码（给新对象添加属性）。</li>\n<li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在内存中创建一个新对象。</li>\n<li>这个新对象内部的[[Prototype]]特性被赋值为构造函数的 prototype 属性。</li>\n<li>构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。</li>\n<li>执行构造函数内部的代码（给新对象添加属性）。</li>\n<li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</li>\n</ul>\n"},{"title":"从浏览器输入网址到渲染的流程","date":"2022-09-19T13:00:00.000Z","_content":"\n# dns 解析\n\n## 作用\n\nDNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它所提供的服务是用来将主机名和域名转换为 IP 地址的工作。\n\n## 解析过程\n\n从客户机到本地 dns 服务器之间的查询为递归查询\ndns 服务器之间的查询为迭代查询\n\n## 缓存\n\n- 浏览器缓存\n- 系统缓存\n- 路由器缓存\n- ISP dns 缓存（比如你用的是电信的网络，则会进入电信的 DNS 缓存服务器中进行查找。）\n\n# tcp 链接\n\n三次握手建立连接\n\n# 服务端处理请求返回报文\n\n# 浏览器渲染页面\n\n- 获取 html 解析成 dom tree\n- 根据 css 生成 css 规则树\n- 根据 dom 树和 css 规则树生成渲染树\n- 计算元素大小和位置\n- 绘制\n\n# 断开连接\n\n四次挥手断开连接\n","source":"_posts/浏览器相关/从浏览器输入网址到渲染的流程.md","raw":"---\ntitle: 从浏览器输入网址到渲染的流程\ndate: 2022-09-19 21:00:00\ncategories:\n  - 浏览器\ntags:\n  - http\n  - dns\n  - 浏览器\n---\n\n# dns 解析\n\n## 作用\n\nDNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它所提供的服务是用来将主机名和域名转换为 IP 地址的工作。\n\n## 解析过程\n\n从客户机到本地 dns 服务器之间的查询为递归查询\ndns 服务器之间的查询为迭代查询\n\n## 缓存\n\n- 浏览器缓存\n- 系统缓存\n- 路由器缓存\n- ISP dns 缓存（比如你用的是电信的网络，则会进入电信的 DNS 缓存服务器中进行查找。）\n\n# tcp 链接\n\n三次握手建立连接\n\n# 服务端处理请求返回报文\n\n# 浏览器渲染页面\n\n- 获取 html 解析成 dom tree\n- 根据 css 生成 css 规则树\n- 根据 dom 树和 css 规则树生成渲染树\n- 计算元素大小和位置\n- 绘制\n\n# 断开连接\n\n四次挥手断开连接\n","slug":"浏览器相关/从浏览器输入网址到渲染的流程","published":1,"updated":"2022-09-18T16:22:34.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87jvz5700041x5z9pn07a7n","content":"<h1 id=\"dns-解析\"><a href=\"#dns-解析\" class=\"headerlink\" title=\"dns 解析\"></a>dns 解析</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它所提供的服务是用来将主机名和域名转换为 IP 地址的工作。</p>\n<h2 id=\"解析过程\"><a href=\"#解析过程\" class=\"headerlink\" title=\"解析过程\"></a>解析过程</h2><p>从客户机到本地 dns 服务器之间的查询为递归查询<br>dns 服务器之间的查询为迭代查询</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li>浏览器缓存</li>\n<li>系统缓存</li>\n<li>路由器缓存</li>\n<li>ISP dns 缓存（比如你用的是电信的网络，则会进入电信的 DNS 缓存服务器中进行查找。）</li>\n</ul>\n<h1 id=\"tcp-链接\"><a href=\"#tcp-链接\" class=\"headerlink\" title=\"tcp 链接\"></a>tcp 链接</h1><p>三次握手建立连接</p>\n<h1 id=\"服务端处理请求返回报文\"><a href=\"#服务端处理请求返回报文\" class=\"headerlink\" title=\"服务端处理请求返回报文\"></a>服务端处理请求返回报文</h1><h1 id=\"浏览器渲染页面\"><a href=\"#浏览器渲染页面\" class=\"headerlink\" title=\"浏览器渲染页面\"></a>浏览器渲染页面</h1><ul>\n<li>获取 html 解析成 dom tree</li>\n<li>根据 css 生成 css 规则树</li>\n<li>根据 dom 树和 css 规则树生成渲染树</li>\n<li>计算元素大小和位置</li>\n<li>绘制</li>\n</ul>\n<h1 id=\"断开连接\"><a href=\"#断开连接\" class=\"headerlink\" title=\"断开连接\"></a>断开连接</h1><p>四次挥手断开连接</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"dns-解析\"><a href=\"#dns-解析\" class=\"headerlink\" title=\"dns 解析\"></a>dns 解析</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它所提供的服务是用来将主机名和域名转换为 IP 地址的工作。</p>\n<h2 id=\"解析过程\"><a href=\"#解析过程\" class=\"headerlink\" title=\"解析过程\"></a>解析过程</h2><p>从客户机到本地 dns 服务器之间的查询为递归查询<br>dns 服务器之间的查询为迭代查询</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ul>\n<li>浏览器缓存</li>\n<li>系统缓存</li>\n<li>路由器缓存</li>\n<li>ISP dns 缓存（比如你用的是电信的网络，则会进入电信的 DNS 缓存服务器中进行查找。）</li>\n</ul>\n<h1 id=\"tcp-链接\"><a href=\"#tcp-链接\" class=\"headerlink\" title=\"tcp 链接\"></a>tcp 链接</h1><p>三次握手建立连接</p>\n<h1 id=\"服务端处理请求返回报文\"><a href=\"#服务端处理请求返回报文\" class=\"headerlink\" title=\"服务端处理请求返回报文\"></a>服务端处理请求返回报文</h1><h1 id=\"浏览器渲染页面\"><a href=\"#浏览器渲染页面\" class=\"headerlink\" title=\"浏览器渲染页面\"></a>浏览器渲染页面</h1><ul>\n<li>获取 html 解析成 dom tree</li>\n<li>根据 css 生成 css 规则树</li>\n<li>根据 dom 树和 css 规则树生成渲染树</li>\n<li>计算元素大小和位置</li>\n<li>绘制</li>\n</ul>\n<h1 id=\"断开连接\"><a href=\"#断开连接\" class=\"headerlink\" title=\"断开连接\"></a>断开连接</h1><p>四次挥手断开连接</p>\n"},{"title":"从浏览器输入网址到渲染的流程","date":"2022-09-19T13:00:00.000Z","_content":"\n# 渲染过程\n\n![images/browerFlow.png]\n","source":"_posts/浏览器相关/浏览器的渲染过程.md","raw":"---\ntitle: 从浏览器输入网址到渲染的流程\ndate: 2022-09-19 21:00:00\ncategories:\n  - 浏览器\ntags:\n  - html\n  - css\n  - js\n  - 浏览器\n---\n\n# 渲染过程\n\n![images/browerFlow.png]\n","slug":"浏览器相关/浏览器的渲染过程","published":1,"updated":"2022-09-18T16:25:16.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87jvz5700051x5z81x647po","content":"<h1 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h1><p>![images/browerFlow.png]</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h1><p>![images/browerFlow.png]</p>\n"},{"title":"强缓存与协商缓存","date":"2022-09-18T13:00:00.000Z","_content":"","source":"_posts/计算机基础/计算机网络/缓存.md","raw":"---\ntitle: 强缓存与协商缓存\ndate: 2022-09-18 21:00:00\ncategories:\n  - 计算机基础\n  - 计算机网络\ntags:\n  - http\n  - cache\n---\n","slug":"计算机基础/计算机网络/缓存","published":1,"updated":"2022-09-18T12:19:56.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87jvz59000a1x5z2lhbft8f","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cl7jaz9sf0002145zdij1gsje","category_id":"cl7os3e3d0001eo5zb7nu1780","_id":"cl7os3e3e0002eo5zfb2k022x"},{"post_id":"cl7jb4mj5000h145zcw651268","category_id":"cl7os5di40009eo5zeo8y48j2","_id":"cl7uij7uz0008jnjg0n9tgj53"},{"post_id":"cl7jb4mj5000h145zcw651268","category_id":"cl7os5di5000ceo5zf04g4a2y","_id":"cl7uij7uz000ajnjgeclz8lad"},{"post_id":"cl7jb4xz6000i145zbzvu1qf1","category_id":"cl7os5di40009eo5zeo8y48j2","_id":"cl7uij7uz000cjnjgcdgk8vvq"},{"post_id":"cl7jb4xz6000i145zbzvu1qf1","category_id":"cl7os5di5000ceo5zf04g4a2y","_id":"cl7uij7v0000ejnjg6ces5ow6"},{"post_id":"cl7uij7us0000jnjgddrtdozk","category_id":"cl7os3e3d0001eo5zb7nu1780","_id":"cl80ago0j0002ah5z615n5bnh"},{"post_id":"cl7jb08iw0005145zfeaddhkk","category_id":"cl7os3e3d0001eo5zb7nu1780","_id":"cl80ago0k0004ah5zhuyahoie"},{"post_id":"cl7jbartb000v145z6clw3r3r","category_id":"cl80ago0j0003ah5z05wnaktk","_id":"cl80ago0l000bah5z6r7521j0"},{"post_id":"cl7jbartb000v145z6clw3r3r","category_id":"cl80ago0k0008ah5z1k2s1ypc","_id":"cl80ago0l000dah5zah360ehy"},{"post_id":"cl7jb4h74000g145zhprz09zs","category_id":"cl80ago0j0003ah5z05wnaktk","_id":"cl80ak38n000fah5zgnq3dbv4"},{"post_id":"cl80ago0b0000ah5z6pi63nbh","category_id":"cl7os3e3d0001eo5zb7nu1780","_id":"cl87jvz5400011x5z55b549t0"},{"post_id":"cl87jvz5700041x5z9pn07a7n","category_id":"cl87jvz5800061x5zb46xgt02","_id":"cl87jvz5a000e1x5z51dk7pl4"},{"post_id":"cl87jvz59000a1x5z2lhbft8f","category_id":"cl7os5di40009eo5zeo8y48j2","_id":"cl87jvz5a000f1x5z686560kw"},{"post_id":"cl87jvz59000a1x5z2lhbft8f","category_id":"cl7os5di5000ceo5zf04g4a2y","_id":"cl87jvz5a000i1x5zf2wba9km"},{"post_id":"cl7jbax90000w145z54qrfssa","category_id":"cl80ago0j0003ah5z05wnaktk","_id":"cl87jvz5a000k1x5zgsd003bt"},{"post_id":"cl7jbax90000w145z54qrfssa","category_id":"cl80ago0k0008ah5z1k2s1ypc","_id":"cl87jvz5b000n1x5zhlsd36h9"},{"post_id":"cl87jvz5700051x5z81x647po","category_id":"cl87jvz5800061x5zb46xgt02","_id":"cl87jvz5b000p1x5z31ml7u6j"}],"PostTag":[{"post_id":"cl7jaz9sf0002145zdij1gsje","tag_id":"cl7os3xkf0003eo5zb0u05cjt","_id":"cl7os3xkh0005eo5ze20obbst"},{"post_id":"cl7jaz9sf0002145zdij1gsje","tag_id":"cl7os3xkg0004eo5z50cpbrka","_id":"cl7os3xkh0006eo5za8mics0k"},{"post_id":"cl7jaz9sf0002145zdij1gsje","tag_id":"cl7os4a9l0007eo5za9v2fkln","_id":"cl7os4a9m0008eo5z2tgl7m9j"},{"post_id":"cl7jb4mj5000h145zcw651268","tag_id":"cl7os5di5000aeo5z5mk2fixt","_id":"cl7uij7uz0005jnjg1v7t1w79"},{"post_id":"cl7uij7us0000jnjgddrtdozk","tag_id":"cl7os3xkf0003eo5zb0u05cjt","_id":"cl7uij7uz0009jnjg51m61qy9"},{"post_id":"cl7uij7us0000jnjgddrtdozk","tag_id":"cl7uij7ux0002jnjg1miy4khp","_id":"cl7uij7uz000bjnjgc1q51ryo"},{"post_id":"cl7uij7us0000jnjgddrtdozk","tag_id":"cl7uij7uy0004jnjgfpjogupt","_id":"cl7uij7uz000djnjgbf554p82"},{"post_id":"cl7jb4xz6000i145zbzvu1qf1","tag_id":"cl7os5di5000aeo5z5mk2fixt","_id":"cl7uij7v0000fjnjg2wggho9h"},{"post_id":"cl7jb4xz6000i145zbzvu1qf1","tag_id":"cl7uij7uz0007jnjgd61i4lzr","_id":"cl7uij7v0000gjnjgcgor6h2z"},{"post_id":"cl7jb08iw0005145zfeaddhkk","tag_id":"cl7os9uj5000ieo5zh6o7b776","_id":"cl80ago0k0006ah5z6o3m6ez8"},{"post_id":"cl7jb08iw0005145zfeaddhkk","tag_id":"cl80ago0g0001ah5z05jx5hzl","_id":"cl80ago0k0007ah5z23ade5ou"},{"post_id":"cl7jbartb000v145z6clw3r3r","tag_id":"cl80ago0k0005ah5z4u4jcu3e","_id":"cl80ago0l000aah5z84gycmin"},{"post_id":"cl7jbartb000v145z6clw3r3r","tag_id":"cl80ago0k0009ah5zdq1k9fjm","_id":"cl80ago0l000cah5z433w528u"},{"post_id":"cl7jb4h74000g145zhprz09zs","tag_id":"cl80ak38n000eah5zcqxy1l5q","_id":"cl80ak38n000hah5z4yl21hx8"},{"post_id":"cl7jb4h74000g145zhprz09zs","tag_id":"cl80ak38n000gah5z9rc431y8","_id":"cl80ak38o000iah5zfl3d4w2j"},{"post_id":"cl80ago0b0000ah5z6pi63nbh","tag_id":"cl7os3xkf0003eo5zb0u05cjt","_id":"cl87jvz5400021x5ze3cua71w"},{"post_id":"cl80ago0b0000ah5z6pi63nbh","tag_id":"cl87jvz5000001x5zdoeuhnoj","_id":"cl87jvz5400031x5zfjvfbiqy"},{"post_id":"cl87jvz5700041x5z9pn07a7n","tag_id":"cl7os5di5000aeo5z5mk2fixt","_id":"cl87jvz5800071x5zca3m2sah"},{"post_id":"cl87jvz5700041x5z9pn07a7n","tag_id":"cl7os5di5000beo5zeguyb3kl","_id":"cl87jvz5900091x5z0x6n8agn"},{"post_id":"cl87jvz5700041x5z9pn07a7n","tag_id":"cl7os9uj5000ieo5zh6o7b776","_id":"cl87jvz59000b1x5z0fej12s3"},{"post_id":"cl87jvz5700051x5z81x647po","tag_id":"cl87jvz5800081x5zf6702whw","_id":"cl87jvz5a000h1x5z3crfe124"},{"post_id":"cl87jvz5700051x5z81x647po","tag_id":"cl87jvz5a000d1x5z7z2iel4x","_id":"cl87jvz5a000j1x5zb0p5fdkp"},{"post_id":"cl87jvz5700051x5z81x647po","tag_id":"cl7os3xkf0003eo5zb0u05cjt","_id":"cl87jvz5b000m1x5zb4912rzv"},{"post_id":"cl87jvz5700051x5z81x647po","tag_id":"cl7os9uj5000ieo5zh6o7b776","_id":"cl87jvz5b000o1x5z8hchdj7t"},{"post_id":"cl87jvz59000a1x5z2lhbft8f","tag_id":"cl7os5di5000aeo5z5mk2fixt","_id":"cl87jvz5b000q1x5z9jbkfkdw"},{"post_id":"cl87jvz59000a1x5z2lhbft8f","tag_id":"cl87jvz5a000g1x5zccrvgxkh","_id":"cl87jvz5b000r1x5z2hssgwdu"},{"post_id":"cl7jbax90000w145z54qrfssa","tag_id":"cl80ago0k0005ah5z4u4jcu3e","_id":"cl87jvz5b000s1x5z4sgjf483"},{"post_id":"cl7jbax90000w145z54qrfssa","tag_id":"cl87jvz5a000l1x5z0t3ic1bg","_id":"cl87jvz5b000t1x5zhlw9dw0q"}],"Tag":[{"name":"小程序","_id":"cl7j9g8a40004b55zbtana7ci"},{"name":"测试","_id":"cl7j9g8a50006b55z3asa8wxb"},{"name":"js","_id":"cl7os3xkf0003eo5zb0u05cjt"},{"name":"函数","_id":"cl7os3xkg0004eo5z50cpbrka"},{"name":"性能优化","_id":"cl7os4a9l0007eo5za9v2fkln"},{"name":"http","_id":"cl7os5di5000aeo5z5mk2fixt"},{"name":"dns","_id":"cl7os5di5000beo5zeguyb3kl"},{"name":"浏览器","_id":"cl7os9uj5000ieo5zh6o7b776"},{"name":"异步编程","_id":"cl7uij7ux0002jnjg1miy4khp"},{"name":"promise","_id":"cl7uij7uy0004jnjgfpjogupt"},{"name":"tcp","_id":"cl7uij7uz0007jnjgd61i4lzr"},{"name":"事件循环","_id":"cl80ago0g0001ah5z05jx5hzl"},{"name":"React","_id":"cl80ago0k0005ah5z4u4jcu3e"},{"name":"生命周期","_id":"cl80ago0k0009ah5zdq1k9fjm"},{"name":"Diff","_id":"cl80ak38n000eah5zcqxy1l5q"},{"name":"virtual dom","_id":"cl80ak38n000gah5z9rc431y8"},{"name":"object","_id":"cl87jvz5000001x5zdoeuhnoj"},{"name":"html","_id":"cl87jvz5800081x5zf6702whw"},{"name":"css","_id":"cl87jvz5a000d1x5z7z2iel4x"},{"name":"cache","_id":"cl87jvz5a000g1x5zccrvgxkh"},{"name":"Fiber","_id":"cl87jvz5a000l1x5z0t3ic1bg"}]}}